#!/usr/bin/env python

from __future__ import print_function
import numpy as np
import datetime
now = datetime.datetime.now
import click, re, sys, os, time, subprocess
import glob, tables
from csky.utils import ensure_dir
from icecube import astro
import pandas as pd
import uncertainties.unumpy as unp
flush = sys.stdout.flush

@click.group (invoke_without_command=True, chain=True)
@click.option ('--save/--nosave', default=False)
@click.pass_context
def cli (ctx, save):
    pass


@cli.command ()
@click.option('--season', default='IC86-3', type=str)
@click.option('--year', default=2013, type=int)
@click.option('--uncompress', default=False)
def merge_subruns(season, year, uncompress):
    in_base = '/data/ana/Cscd/{}/level3pass2/exp/{}/'.format(season, year)
    out_base = ensure_dir('/data/user/ssclafani/Cscd/{}/level3pass2/exp/{}/'.format(season, year))
    inruns = glob.glob(in_base + '*/*')
    if inruns == 0:
        print('No Runs Found')
    print('Merging {} runs'.format(len(inruns)))
    file_count = 0 
    folder_count = 1
    season_name = season.replace('-', '_')    

    for inrun in sorted(inruns):
        infiles = glob.glob(inrun + '*/*Subrun*.i3.zst')
        infiles = sorted(infiles)
        splitfile = infiles[0].split('/')

        filename = splitfile[-1]
        subrun_num = filename.split('Subrun')[-1]
        subrun_num = subrun_num.replace('.i3.zst','')
        run_num = int(splitfile[-2].replace('Run', ''))
        folder_num = splitfile[-3]
        file_count += 1 
        if file_count < 1000:
            folder_num = folder_count
      
        else:
            folder_count += 1
            folder_num = folder_count
            file_count = 0 
        out_name = '{}/Level3_Cscd_{}_data_Run{}.i3.zst'.format(folder_num, season_name, run_num)
      
        in_zst = str(infiles).replace(',', '')
        in_zst = in_zst.replace('[', '')
        in_zst = in_zst.replace(']', '')
        in_zst = in_zst.replace("'", "")
        
        out_zst = out_base + out_name
        full_out = out_zst.replace('.zst', '')
        print('\rRun: {:3d} : {}         '.format(file_count, full_out), end='')
        sys.stdout.flush()
        #print('Run: {}  :  {}'.format(file_count, full_out))
        #sys.stdout.write("\033[F")
        ensure_dir(full_out.split('Level3_')[0])
        subprocess.call('cat {} > {}'.format(in_zst, out_zst),
                       shell=True)
        if uncompress:
            subprocess.call('zstd -d {} -o {}'.format(out_zst, full_out), shell=True)


@cli.command()
@click.option('--season', default = 'IC86-3')
def merge_runs(season):
    #TBD import merge.py and merge into one file for data, MC per flavor and energy range
    season = season[-1]
    subprocess.call( 'python merge.py /data/user/ssclafani/Cscd/IC86-4/level3pass2/dnn_step02/2014/1/*.hdf5 -o /data/user/ssclafani/Cscd/IC86-4/level3pass2/dnn_step02/IC86_2014_cscdl3_full.hdf5', shell=True)

@cli.command()
@click.option('--season', default='IC86_2013', type=str)
@click.option('--level', default='cscd_l3', type=str)
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
@click.option('--all_unc', default=False)
@click.option('--pullcorrect', default=False)
def make_pandas_arrays(season, level, kind, systematics, all_unc, pullcorrect):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]

    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            

    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
            
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []

    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []

    if kind=='nugen':        
        print('Building Numpy array for Monte Carlo...')
        eranges=['low', 'medium']
        #eranges=['low']
        #flavors=['NuE']
        flavors=['NuE', 'NuMu', 'NuTau']
        for flavor in flavors:
            for erange in eranges:        
                print('Flavor: {}'.format(flavor))
                print('Energy: {}'.format(erange))
                if erange=='low':
                    print('Getting {} {} {}'.format(level, flavor, erange))
                    if systematics == 'spice3' :
                        filename = '/data/user/ssclafani/Cscd/IC86-3/level3pass2/sim/spice3/{}_low.hdf5'.format( flavor)
                        if flavor == 'NuE':
                            nfiles = 3000 
                        elif flavor == 'NuMu':
                            nfiles = 3000
                        elif flavor == 'NuTau':
                            nfiles = 3000
                    else:
                        if all_unc == True:
                            filename = '/data/user/ssclafani/DNN_reco_7paramunc/data/NuGen/{}_low.hdf5'.format( flavor, flavor)
                            if flavor == 'NuE':
                                nfiles = 100 
                            elif flavor == 'NuMu':
                                nfiles = 100
                            elif flavor == 'NuTau':
                                nfiles = 100
                        else:
                          
                            #filename = '/data/user/ssclafani/Cscd/IC86-3/level3pass2/sim/{}_low_updated_bg.hdf5'.format( flavor)
                            filename = '/data/user/ssclafani/DNN_reco_egen/data/NuGen/{}_low_allDNN.hdf5'.format( flavor)
                            if flavor == 'NuE':
                                nfiles = 2985
                            elif flavor == 'NuMu':
                                nfiles = 2987
                            elif flavor == 'NuTau':
                                nfiles = 2994
                            '''
                            filename = '/data/user/ssclafani/DNN_reco/data/NuGen/{}/low_energy/IC86_2013_holeice_30_v4/cscd_l3/{}_low_allDNN.hdf5'.format( flavor, flavor)
                            if flavor == 'NuE':
                                nfiles = 100
                            elif flavor == 'NuMu':
                                nfiles = 100
                            elif flavor == 'NuTau':
                                nfiles = 100
                            '''
                    f = tables.open_file (filename)
                    trueE=f.root.MCPrimary.cols.energy[:]
        
                    z=f.root.MCPrimary.cols.zenith[:]
                    a=f.root.MCPrimary.cols.azimuth[:]  
                    particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                elif erange=='medium':
                    
                    print('Getting {} {} {}'.format(level, flavor, erange))
                    if systematics == 'spice3' :
                        filename = '/data/user/ssclafani/Cscd/IC86-3/level3pass2/sim/spice3/{}_medium.hdf5'.format( flavor)
                        if flavor == 'NuE':
                            nfiles = 3000 
                        elif flavor == 'NuMu':
                            nfiles = 3000
                        elif flavor == 'NuTau':
                            nfiles = 3000
                    else:
                        if all_unc == True:
                            filename = '/data/user/ssclafani/DNN_reco_7paramunc/data/NuGen/{}_medium.hdf5'.format( flavor)
                            if flavor == 'NuE':
                                nfiles = 100 
                            elif flavor == 'NuMu':
                                nfiles = 100
                            elif flavor == 'NuTau':
                                nfiles = 100
                        else:
                            #filename = '/data/user/ssclafani/DNN_reco/data/NuGen/{}/medium_energy/IC86_2013_holeice_30_v4/cscd_l3/{}_medium_allDNN.hdf5'.format( flavor, flavor)
                            filename = '/data/user/ssclafani/DNN_reco_egen/data/NuGen/{}_medium_allDNN.hdf5'.format( flavor)
                            '''
                            if flavor == 'NuE':
                                nfiles = 100
                            elif flavor == 'NuMu':
                                nfiles = 100
                            elif flavor == 'NuTau':
                                nfiles = 100
                            
                            filename = '/data/user/ssclafani/Cscd/IC86-3/level3pass2/sim/{}_medium_updated_bg.hdf5'.format( flavor)
                            '''
                            if flavor == 'NuE':
                                nfiles = 2697
                            elif flavor == 'NuMu':
                                nfiles = 2822
                            elif flavor == 'NuTau':
                                nfiles = 2902
                            
                    f = tables.open_file (filename)
                    trueE=f.root.MCPrimary.cols.energy[:]
                    z=f.root.MCPrimary.cols.zenith[:]
                    a=f.root.MCPrimary.cols.azimuth[:]  
                    particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                pullc = False 
                ngen=f.root.I3MCWeightDict.cols.NEvents[0]*nfiles
                print ( nfiles, ngen)
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                ow/=ngen

                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                             'CascadeGeneratorReco_SpiceLea_50cm_I3Particle',#'DeepLearningReco_event_selection_cscdl3_300m_02', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', #'DeepLearningReco_event_selection_entering_01', 
                            #'DeepLearningReco_event_selection_track_length_01',
                             #'DeepLearningReco_event_selection_pid_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',
                             #'DeepLearningReco_event_selection_cscdl2_0m_0', 
                            #'DeepLearningReco_event_selection_cscdl2_300m_02', 
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02', 
                            'DeepLearningReco_event_selection_track_length_02']


                DNN_types = ['dir', 'cgen', #'starting_300m', 
                            'starting_300m', #'entering', 
                            #'length', 
                            #'pid2', 
                            'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_300m', #'starting',  'starting_300m', 
                            #'starting_300m', 
                            'length']
                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}
                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    if DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    if DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    if DNN_type == 'entering':
                        keys = ['p_entering']
                    if DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    if DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    if DNN_type == 'starting':
                        keys = ['p_starting']
                    if DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    if DNN_type == 'is_track':
                        keys = ['p_is_track']
                    if DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    if DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    print('allunc')
                    UNC_names = [
                    'EventGenerator_cascade_7param_BFRv1Spice321_02', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_icecube[:]
                
                monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
                monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
                monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
                monopod_x = f.root.L3_MonopodFit4.cols.x[:]
                monopod_y = f.root.L3_MonopodFit4.cols.y[:]
                monopod_z = f.root.L3_MonopodFit4.cols.z[:]

                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                ra = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                dec= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                if pullc:
                    dir_x_unc*= 1.61
                    dir_y_unc*= 1.64
                    dir_z_unc*= 1.83
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)

                DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
                all_cgen_x.append(data[DNN_name]['x'])
                all_cgen_y.append(data[DNN_name]['y'])
                all_cgen_z.append(data[DNN_name]['z'])
                all_cgen_time.append(data[DNN_name]['time'])
                all_cgen_zen.append(data[DNN_name]['zenith'])
                all_cgen_azi.append(data[DNN_name]['azimuth'])
                all_cgen_E.append(data[DNN_name]['energy'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
                #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
                            
                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_BFRv1Spice321_02'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov' 
                    sigma_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(sigma_azimuth)
                    sigma_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(sigma_zenith)
                    all_circ_unc_cov.append(np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_fit'
                    sigma_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(sigma_azimuth)
                    sigma_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(sigma_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(sigma_zenith**2 + sigma_azimuth**2 * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_sand'
                    sigma_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(sigma_azimuth)
                    sigma_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(sigma_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(sigma_zenith**2 + sigma_azimuth**2 * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321_02_cov_matrix_cov_sand_fit'
                    sigma_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(sigma_azimuth)
                    sigma_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(sigma_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(sigma_zenith**2 + sigma_azimuth**2 * np.sin(egen_zenith)**2) / np.sqrt(2.))


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                all_monopod_azi.append(monopod_azi)
                all_monopod_zen.append(monopod_zen)
                all_monopod_E.append(monopod_E)
                all_monopod_x.append(monopod_x)
                all_monopod_y.append(monopod_y)
                all_monopod_z.append(monopod_z)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)

        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        all_cgen_x = np.concatenate(all_cgen_x)
        all_cgen_y = np.concatenate(all_cgen_y)
        all_cgen_z = np.concatenate(all_cgen_z)
        all_cgen_time = np.concatenate(all_cgen_time)
        all_cgen_zen = np.concatenate(all_cgen_zen)
        all_cgen_azi = np.concatenate(all_cgen_azi)
        all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_monopod_azi = np.concatenate(all_monopod_azi)
        all_monopod_zen = np.concatenate(all_monopod_zen)
        all_monopod_E = np.concatenate(all_monopod_E)
        all_monopod_x = np.concatenate(all_monopod_x)
        all_monopod_y = np.concatenate(all_monopod_y)
        all_monopod_z = np.concatenate(all_monopod_z)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'sigma' :all_sigma, 
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        #if pullc: 
        #df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_es.pickle') 
        #print('saving pullc...')
        #else: 
            #df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_es_nopull.pickle') 
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            if all_unc == True:
                df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_all_unc.hdf5', 'data') 
            else:
                df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_egen.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='data':        
        print('Building hdf5 array for Data...')
        print(season)
        filenames = glob.glob('/data/user/ssclafani/Cscd/IC86-{}/level3pass2/dnn_step02/{}_cscdl3_full.hdf5'.format(season[-1], season))    
        filename = filenames[0]
        f = tables.open_file (filename)

        all_cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
        pullc = False
        all_Event=f.root.I3EventHeader.cols.Event[:]
        #SubEvent=f.root.I3EventHeader.cols.vent[:]
        all_Run=f.root.I3EventHeader.cols.Run[:]
        all_time = f.root.I3EventHeader.cols.time_start_mjd[:]
        DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 'CascadeGeneratorReco_SpiceLea_50cm_I3Particle',#'DeepLearningReco_event_selection_cscdl3_300m_02', 
                    'DeepLearningReco_event_selection_cscdl3_300m_01', #'DeepLearningReco_event_selection_entering_01', 
                    #'DeepLearningReco_event_selection_track_length_01',
                     #'DeepLearningReco_event_selection_pid_01', 
                    'DeepLearningReco_dnn_export_cscdID', 
                    'DeepLearningReco_event_selection_03', 'DeepLearningReco_event_selection_cscdl3_02',
                    #'DeepLearningReco_event_selection_cscdl3_big_03', #'DeepLearningReco_event_selection_cscdl2_0m_0', 
                    #'DeepLearningReco_event_selection_cscdl2_300m_02', 
                    'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02', 
                    'DeepLearningReco_event_selection_track_length_02']

        DNN_types = ['dir', 'cgen', #'starting_300m', 
                    'starting_300m', #'entering', 
                    #'length', 
                    #'pid2', 
                    'is_track', 
                    'starting', 'starting', 
                    'starting', #'starting',  'starting_300m', 
                    'starting_300m', 'length']
        data = {}
        for index, DNN_name in enumerate(DNN_names):
            print( DNN_name)
            DNN_type= DNN_types[index]
            DNN={}
            if DNN_type == 'dir':
                keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                        'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                        'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
            if DNN_type == 'pid':
                keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
            if DNN_type == 'pid2':
                keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                        'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
            if DNN_type == 'entering':
                keys = ['p_entering']
            if DNN_type == 'starting_300m':
                keys = ['p_starting_300m']
            if DNN_type == 'starting':
                keys = ['p_starting']
            if DNN_type == 'starting_no_un':
                keys = ['p_starting']
            if DNN_type == 'is_track':
                keys = ['p_is_track']
            if DNN_type == 'length':
                keys = ['Length', 'Length_log_uncertainty']
            if DNN_type == 'cgen':
                keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
            for key in keys:
                DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
            data[DNN_name] = DNN

        del DNN
        if pullc:
            dir_NN_X_un *= 1.6721
            dir_NN_Y_un *= 1.6539
            dir_NN_Z_un *= 1.5506

        #CSCD_SBU VARIABLES
        all_cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_HLC[:]
        all_cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
        all_cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
        all_cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
        all_cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_I3XYScale[:]
        all_cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
        all_cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_deepcore[:]
        all_cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_icecube[:]
    
        #monopod_azi = f.root.L3_MonopodFit4_AmptFit.cols.azimuth[:]
        #monopod_zen= f.root.L3_MonopodFit4_AmptFit.cols.zenith[:]
        #monopod_E = f.root.L3_MonopodFit4_AmptFit.cols.energy[:]
        #monopod_x = f.root.L3_MonopodFit4_AmptFit.cols.x[:]
        #monopod_y = f.root.L3_MonopodFit4_AmptFit.cols.y[:]
        #monopod_z = f.root.L3_MonopodFit4_AmptFit.cols.z[:]

        
        #DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
        #DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
        #DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
        #DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
        #DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

        #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
        all_cgen_zen =  data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith']
        all_cgen_azi =  data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']

        all_ra = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
        all_dec= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] - np.pi/2.
       
        del f 
        print('fixing ra, dec')
        all_ra, all_dec = astro.dir_to_equa(all_cgen_zen, all_cgen_azi, all_time)
        print('fixing zen, azimuth')
        all_cgen_zen, all_cgen_azi = astro.equa_to_dir(all_ra, all_dec, all_time)
        print('Done')
        dir_x = np.array(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX'])
        dir_y = np.array(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY'])
        dir_z = np.array(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ'])
        dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
        dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
        dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
        dir_x = np.clip (dir_x, -1, 1)
        dir_y = np.clip (dir_y, -1, 1)
        dir_z = np.clip (dir_z, -1, 1)
        dir_x_unc = np.maximum (dir_x_unc, 1e-3)
        dir_y_unc = np.maximum (dir_y_unc, 1e-3)
        dir_z_unc = np.maximum (dir_z_unc, 1e-3)
        '''
        # note: fancier calibration better, but this is good enough for now
        print('making array')
        u_dir_x = unp.uarray( dir_x, dir_x_unc)
        u_dir_y = unp.uarray( dir_y, dir_y_unc)
        u_dir_z = unp.uarray( dir_z, dir_z_unc)

        # calculate zenith and azimuth
        dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
        u_dir_x_normed = u_dir_x / dir_length
        u_dir_y_normed = u_dir_y / dir_length
        # dir_z and zenith is independent of x and y and shouldnt be normalized
        #u_dir_z_normed = u_dir_z / dir_length
        u_dir_z[u_dir_z > 1.] = 1.
        u_dir_z[u_dir_z < -1.] = -1.
        # calculate uncertainties
        print('doing trig')
        zenith_u = unp.arccos( u_dir_z )
        azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
        zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
        print('calculating sigma')
        sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
        sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
        all_sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
        ''' 
        '''
        all_Run.append(Run)
        all_Event.append(Event)
        all_time.append(time)

        #all_ow.append(ow)

        all_dec.append(dec)
        all_ra.append(ra)

        all_sigma.append(sigma)
        '''
        #all_trueRa.append(trueRa)
        #all_trueDec.append(trueDec)
        #all_type.append(particle_type)
        #all_interaction.append(interaction_type)

        DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
        all_DNNMESE_E = (data[DNN_name]['PrimaryEnergy'])
        all_DNNMESE_zen = (data[DNN_name]['PrimaryZenith'])
        all_DNNMESE_azi = (data[DNN_name]['PrimaryAzimuth'])
        all_DNNMESE_x = (data[DNN_name]['PrimaryDirectionX'])
        all_DNNMESE_y = (data[DNN_name]['PrimaryDirectionY'])
        all_DNNMESE_z = (data[DNN_name]['PrimaryDirectionZ'])
        all_DNNMESE_zen_un = (data[DNN_name]['PrimaryZenith_uncertainty'])
        all_DNNMESE_azi_un = (data[DNN_name]['PrimaryAzimuth_uncertainty'])

        DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
        all_cgen_x = (data[DNN_name]['x'])
        all_cgen_y = (data[DNN_name]['y'])
        all_cgen_z = (data[DNN_name]['z'])
        all_cgen_time = (data[DNN_name]['time'])
        all_cgen_zen = (data[DNN_name]['zenith'])
        all_cgen_azi = (data[DNN_name]['azimuth'])
        all_cgen_E = (data[DNN_name]['energy'])

        #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
        #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
        
        DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
        all_es_300m_p_starting_300m_01 = (data[DNN_name]['p_starting_300m'])

        #DNN_name = 'DeepLearningReco_event_selection_entering_01'
        #all_es_p_entering.append(data[DNN_name]['p_entering'])
                     

        DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
        all_es_monopod_p_starting_300m_big_02 = (data[DNN_name]['p_starting_300m'])
        
        #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
        #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

        #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
        #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
        
        DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
        all_es_cscdl3_02_starting = (data[DNN_name]['p_starting'])

        DNN_name = 'DeepLearningReco_event_selection_03'
        all_es_03_starting = (data[DNN_name]['p_starting'])

        DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
        all_es_cscdl2_big_starting = (data[DNN_name]['p_starting'])

        
        DNN_name = 'DeepLearningReco_event_selection_track_length_02'
        all_es_length_02 = (data[DNN_name]['Length'])
        all_es_length_log_unc_02 = (data[DNN_name]['Length_log_uncertainty'])
        
        DNN_name = 'DeepLearningReco_dnn_export_cscdID'
        all_es_p_track = (data[DNN_name]['p_is_track'])

        '''
        all_cscdl3_cont_tag.append(cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

        #all_monopod_azi.append(monopod_azi)
        #all_monopod_zen.append(monopod_zen)
        #all_monopod_E.append(monopod_E)
        #all_monopod_x.append(monopod_x)
        #all_monopod_y.append(monopod_y)
        #all_monopod_z.append(monopod_z)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_time=np.concatenate(all_time)
        #all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_sigma=np.concatenate(all_sigma)
        #all_trueRa=np.concatenate(all_trueRa)
        #all_trueDec=np.concatenate(all_trueDec)
        #all_type=np.concatenate(all_type)
        #all_interaction=np.concatenate(all_interaction)

        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
       
        #cgen
        all_cgen_x = np.concatenate(all_cgen_x)
        all_cgen_y = np.concatenate(all_cgen_y)
        all_cgen_z = np.concatenate(all_cgen_z)
        all_cgen_time = np.concatenate(all_cgen_time)
        all_cgen_zen = np.concatenate(all_cgen_zen)
        all_cgen_azi = np.concatenate(all_cgen_azi)
        all_cgen_E = np.concatenate(all_cgen_E)
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        #all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        #all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        #all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        #all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        #all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        #all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        #all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        #all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)
        '''

        
        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_time, 'ra': all_ra, 'dec' :all_dec, #'sigma' :all_sigma, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : dir_x_unc, 'DNNMESE_y_unc' : dir_y_unc, 'DNNMESE_z_unc' : dir_z_unc,
            'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}


        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if pullc:
            ensure_dir('/data/user/ssclafani/data/cscd/{}'.format(season)) 
            df.to_hdf('/data/user/ssclafani/data/cscd/{}/{}_mc_es_test.hdf5'.format(season, season), 'data') 
            print('saving pullc...')
        else: 
            ensure_dir('/data/user/ssclafani/data/cscd/{}'.format(season) )
            df.to_hdf('/data/user/ssclafani/data/cscd/{}/{}_data_es_test.hdf5'.format(season, season), 'data') 
            print('saving nopullc...')
    elif self.opts.kind=='muongun':        
        eranges=['low', 'medium']
        for erange in eranges:        
            print('Getting {} {}'.format(level, erange))
            if erange=='high':
                #filename = '/data/user/ssclafani/DNN_reco/data/MuonGun/{}_energy/IC86_2011/cscd_l3/muongun_{}.hdf5'.format(erange,  erange)
                nfiles= 5000
            else:
                if erange=='very_low':
                    nfiles=self.opts.nfilesverylow
                elif erange=='low':
                    nfiles = 100.
                elif erange=='medium':
                    nfiles= 20.
                filename = '/data/user/ssclafani/Cscd/IC86-3/level3pass2/Muongun_{}_updated_bg.hdf5'.format(erange)
               # filename = '/data/user/ssclafani/DNN_reco/data/MuonGun/{}_energy/IC86_2013/cscd_l3/muongun_{}.hdf5'.format(erange,  erange)
            f = tables.open_file (filename)
            trueE=f.root.MCPrimary.cols.energy[:]
            true_z=f.root.MCPrimary.cols.zenith[:]
            true_a=f.root.MCPrimary.cols.azimuth[:]  
            particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
            Event=f.root.I3EventHeader.cols.Event[:]
            Run=f.root.I3EventHeader.cols.Run[:]
            weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:]/ nfiles
            weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] / nfiles

            weight=weight_SIBYLL + weight_DPMJET
            pullc=False    
            print(sum(np.nan_to_num(weight)*365*86400))
            DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
            DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
            DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

            cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
            

            DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 'CascadeGeneratorReco_SpiceLea_50cm_I3Particle',#'DeepLearningReco_event_selection_cscdl3_300m_02', 
                        'DeepLearningReco_event_selection_cscdl3_300m_01', #'DeepLearningReco_event_selection_entering_01', 
                        #'DeepLearningReco_event_selection_track_length_01',
                         #'DeepLearningReco_event_selection_pid_01', 
                        'DeepLearningReco_dnn_export_cscdID', 
                        'DeepLearningReco_event_selection_03', 'DeepLearningReco_event_selection_cscdl3_02',
                        'DeepLearningReco_event_selection_cscdl3_big_03', #'DeepLearningReco_event_selection_cscdl2_0m_0', 
                        #'DeepLearningReco_event_selection_cscdl2_300m_02', 
                        'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02', 
                        'DeepLearningReco_event_selection_track_length_02']

            DNN_types = ['dir', 'cgen', #'starting_300m', 
                        'starting_300m', #'entering', 
                        #'length', 
                        #'pid2', 
                        'is_track', 
                        'starting', 'starting', 
                        'starting', #'starting',  'starting_300m', 
                        'starting_300m', 'length']
            data = {}
            for index, DNN_name in enumerate(DNN_names):
                print( DNN_name)
                DNN_type= DNN_types[index]
                DNN={}
                if DNN_type == 'dir':
                    keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                            'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                            'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                if DNN_type == 'pid':
                    keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                if DNN_type == 'pid2':
                    keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                            'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                if DNN_type == 'entering':
                    keys = ['p_entering']
                if DNN_type == 'starting_300m':
                    keys = ['p_starting_300m']
                if DNN_type == 'starting':
                    keys = ['p_starting']
                if DNN_type == 'starting_no_un':
                    keys = ['p_starting']
                if DNN_type == 'is_track':
                    keys = ['p_is_track']
                if DNN_type == 'length':
                    keys = ['Length', 'Length_log_uncertainty']
                if DNN_type == 'cgen':
                    keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                for key in keys:
                    DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                data[DNN_name] = DNN

            if pullc:
                dir_NN_X_un *= 1.6721
                dir_NN_Y_un *= 1.6539
                dir_NN_Z_un *= 1.5506

            #CSCD_SBU VARIABLES
            cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_HLC[:]
            #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
            #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
            cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
            #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
            cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
            #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
            #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
            cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
            cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_I3XYScale[:]
            cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
            #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
            cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_deepcore[:]
            cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_icecube[:]

            
            DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
            DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
            DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
            DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
            DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
            DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
            DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
            DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
            
            monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
            monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
            monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
            monopod_x = f.root.L3_MonopodFit4.cols.x[:]
            monopod_y = f.root.L3_MonopodFit4.cols.y[:]
            monopod_z = f.root.L3_MonopodFit4.cols.z[:]

            trueRa = true_a
            trueDec = true_z-np.pi/2.
            
            ra = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
            dec= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] - np.pi/2.

            dir_x =   data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
            dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
            dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
            dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
            dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
            dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
            dir_x = np.clip (dir_x, -1, 1)
            dir_y = np.clip (dir_y, -1, 1)
            dir_z = np.clip (dir_z, -1, 1)
            dir_x_unc = np.maximum (dir_x_unc, 1e-3)
            dir_y_unc = np.maximum (dir_y_unc, 1e-3)
            dir_z_unc = np.maximum (dir_z_unc, 1e-3)

            # note: fancier calibration better, but this is good enough for now

            u_dir_x = unp.uarray( dir_x, dir_x_unc)
            u_dir_y = unp.uarray( dir_y, dir_y_unc)
            u_dir_z = unp.uarray( dir_z, dir_z_unc)

            # calculate zenith and azimuth
            dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
            u_dir_x_normed = u_dir_x / dir_length
            u_dir_y_normed = u_dir_y / dir_length
            # dir_z and zenith is independent of x and y and shouldnt be normalized
            #u_dir_z_normed = u_dir_z / dir_length
            u_dir_z[u_dir_z > 1.] = 1.
            u_dir_z[u_dir_z < -1.] = -1.
            # calculate uncertainties
            zenith_u = unp.arccos( u_dir_z )
            azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
            zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
            sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
            sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
            sigma = np.maximum (sigma, np.radians (np.sqrt (3)))


            all_Run.append(Run)
            all_Event.append(Event)
            all_trueE.append(trueE)
            all_weight.append(weight)
            all_dec.append(dec)
            all_ra.append(ra)
            all_trueRa.append(trueRa)
            all_trueDec.append(trueDec)
            all_sigma.append(sigma)
            all_weight_sibyll.append(weight_SIBYLL)
            all_weight_dpmjet.append(weight_DPMJET)

            all_type.append(particle_type)

            DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
            all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
            all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
            all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
            all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
            all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
            all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
            all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
            all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])

            DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
            all_cgen_x.append(data[DNN_name]['x'])
            all_cgen_y.append(data[DNN_name]['y'])
            all_cgen_z.append(data[DNN_name]['z'])
            all_cgen_time.append(data[DNN_name]['time'])
            all_cgen_zen.append(data[DNN_name]['zenith'])
            all_cgen_azi.append(data[DNN_name]['azimuth'])
            all_cgen_E.append(data[DNN_name]['energy'])

            #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
            #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
            
            DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
            all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

            #DNN_name = 'DeepLearningReco_event_selection_entering_01'
            #all_es_p_entering.append(data[DNN_name]['p_entering'])
                         

            DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
            all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
            
            #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
            #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

            #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
            #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
            
            DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
            all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

            DNN_name = 'DeepLearningReco_event_selection_03'
            all_es_03_starting.append(data[DNN_name]['p_starting'])

            DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
            all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


            #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
            #all_es_length.append(data[DNN_name]['Length'])
            #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
            
            DNN_name = 'DeepLearningReco_event_selection_track_length_02'
            all_es_length_02.append(data[DNN_name]['Length'])
            all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
            
            DNN_name = 'DeepLearningReco_dnn_export_cscdID'
            all_es_p_track.append(data[DNN_name]['p_is_track'])

            #DNN_name = 'DeepLearningReco_event_selection_pid_01'
            #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
            #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
            #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
            #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
            #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
            #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
            
            all_DNNlabels_p_starting.append(DNNlabels_p_starting)
            all_DNNlabels_p_entering.append(DNNlabels_p_entering)
            all_DNNlabels_true_x.append(DNNlabels_true_x)
            all_DNNlabels_true_y.append(DNNlabels_true_y)
            all_DNNlabels_true_z.append(DNNlabels_true_z)
            all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
            all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
            all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
            
            all_cscdl3_cont_tag.append(cscdl3_cont_tag)

            all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
            #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
            #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
            all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
            #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
            all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
            #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
            #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
            all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
            all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
            all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
            #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
            all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
            all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                
            all_monopod_azi.append(monopod_azi)
            all_monopod_zen.append(monopod_zen)
            all_monopod_E.append(monopod_E)
            all_monopod_x.append(monopod_x)
            all_monopod_y.append(monopod_y)
            all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)


        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
       
        #cgen
        all_cgen_x = np.concatenate(all_cgen_x)
        all_cgen_y = np.concatenate(all_cgen_y)
        all_cgen_z = np.concatenate(all_cgen_z)
        all_cgen_time = np.concatenate(all_cgen_time)
        all_cgen_zen = np.concatenate(all_cgen_zen)
        all_cgen_azi = np.concatenate(all_cgen_azi)
        all_cgen_E = np.concatenate(all_cgen_E)
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_monopod_p_starting_300m_big_02 
        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_monopod_azi = np.concatenate(all_monopod_azi)
        all_monopod_zen = np.concatenate(all_monopod_zen)
        all_monopod_E = np.concatenate(all_monopod_E)
        all_monopod_x = np.concatenate(all_monopod_x)
        all_monopod_y = np.concatenate(all_monopod_y)
        all_monopod_z = np.concatenate(all_monopod_z)


        all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'sigma' :all_sigma, 
            'weight_sibyll': all_weight_sibyll, 'weight_dpmjet' : all_weight_dpmjet, 'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}
        
        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)

        print('Saving...')
        if pullc:
            df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_testes.pickle') 
        else:
            #df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_es_nopull.pickle') 
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_testes_nopull.hdf5', 'data') 
            print('saving nopullc...')
    elif self.opts.kind=='corsika':        
        print('Getting Corsika')
        nfiles= 100000
        nevents = 10000
        filename = '/data/user/ssclafani/DNN_reco/data/Corsika_final/12489/IC86-2/level3/Corsika_Full.hdf5'

        f = tables.open_file (filename)
        trueE=f.root.MCPrimary.cols.energy[:]
        true_z=f.root.MCPrimary.cols.zenith[:]
        true_a=f.root.MCPrimary.cols.azimuth[:]  
        particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
        Event=f.root.I3EventHeader.cols.Event[:]
        Run=f.root.I3EventHeader.cols.Run[:]
        weight = f.root.weights.cols.GaisserH4aWeight[:] / (nfiles)
        #weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:]/ nfiles
        #weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] / nfiles

        #weight=weight_SIBYLL + weight_DPMJET
        pullc=False    
        print(weight[0]*365*86400)
        DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
        DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
        DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

        cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
        

        DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 'CascadeGeneratorReco_SpiceLea_50cm_I3Particle',#'DeepLearningReco_event_selection_cscdl3_300m_02', 
                    'DeepLearningReco_event_selection_cscdl3_300m_01', #'DeepLearningReco_event_selection_entering_01', 
                    #'DeepLearningReco_event_selection_track_length_01',
                     #'DeepLearningReco_event_selection_pid_01', 
                    'DeepLearningReco_dnn_export_cscdID', 
                    'DeepLearningReco_event_selection_03', 'DeepLearningReco_event_selection_cscdl3_02',
                    'DeepLearningReco_event_selection_cscdl3_big_03', #'DeepLearningReco_event_selection_cscdl2_0m_0', 
                    #'DeepLearningReco_event_selection_cscdl2_300m_02', 
                    'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02', 
                    'DeepLearningReco_event_selection_track_length_02']

        DNN_types = ['dir', 'cgen', #'starting_300m', 
                    'starting_300m', #'entering', 
                    #'length', 
                    #'pid2', 
                    'is_track', 
                    'starting', 'starting', 
                    'starting', #'starting',  'starting_300m', 
                    'starting_300m', 'length']
        data = {}
        for index, DNN_name in enumerate(DNN_names):
            print( DNN_name)
            DNN_type= DNN_types[index]
            DNN={}
            if DNN_type == 'dir':
                keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                        'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                        'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
            if DNN_type == 'pid':
                keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
            if DNN_type == 'pid2':
                keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                        'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
            if DNN_type == 'entering':
                keys = ['p_entering']
            if DNN_type == 'starting_300m':
                keys = ['p_starting_300m']
            if DNN_type == 'starting':
                keys = ['p_starting']
            if DNN_type == 'starting_no_un':
                keys = ['p_starting']
            if DNN_type == 'is_track':
                keys = ['p_is_track']
            if DNN_type == 'length':
                keys = ['Length', 'Length_log_uncertainty']
            if DNN_type == 'cgen':
                keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
            for key in keys:
                DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
            data[DNN_name] = DNN

        if pullc:
            dir_NN_X_un *= 1.6721
            dir_NN_Y_un *= 1.6539
            dir_NN_Z_un *= 1.5506

        if pullc:
            dir_NN_X_un *= 1.6721
            dir_NN_Y_un *= 1.6539
            dir_NN_Z_un *= 1.5506

        #CSCD_SBU VARIABLES
        cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_HLC[:]
        #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
        #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
        cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
        #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
        cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
        #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
        #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
        cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
        cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_I3XYScale[:]
        cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
        #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
        cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_deepcore[:]
        cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.distance_icecube[:]

        
        DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
        DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
        DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
        DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
        DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
        DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
        DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
        DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
        
        monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
        monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
        monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
        monopod_x = f.root.L3_MonopodFit4.cols.x[:]
        monopod_y = f.root.L3_MonopodFit4.cols.y[:]
        monopod_z = f.root.L3_MonopodFit4.cols.z[:]

        trueRa = true_a
        trueDec = true_z-np.pi/2.
        
        ra = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
        dec= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] - np.pi/2.

        dir_x =   data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
        dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
        dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
        dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
        dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
        dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
        dir_x = np.clip (dir_x, -1, 1)
        dir_y = np.clip (dir_y, -1, 1)
        dir_z = np.clip (dir_z, -1, 1)
        dir_x_unc = np.maximum (dir_x_unc, 1e-3)
        dir_y_unc = np.maximum (dir_y_unc, 1e-3)
        dir_z_unc = np.maximum (dir_z_unc, 1e-3)

        # note: fancier calibration better, but this is good enough for now

        u_dir_x = unp.uarray( dir_x, dir_x_unc)
        u_dir_y = unp.uarray( dir_y, dir_y_unc)
        u_dir_z = unp.uarray( dir_z, dir_z_unc)

        # calculate zenith and azimuth
        dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
        u_dir_x_normed = u_dir_x / dir_length
        u_dir_y_normed = u_dir_y / dir_length
        # dir_z and zenith is independent of x and y and shouldnt be normalized
        #u_dir_z_normed = u_dir_z / dir_length
        u_dir_z[u_dir_z > 1.] = 1.
        u_dir_z[u_dir_z < -1.] = -1.
        # calculate uncertainties
        zenith_u = unp.arccos( u_dir_z )
        azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
        zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
        sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
        sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
        sigma = np.maximum (sigma, np.radians (np.sqrt (3)))


        all_Run.append(Run)
        all_Event.append(Event)
        all_trueE.append(trueE)
        all_weight.append(weight)
        all_dec.append(dec)
        all_ra.append(ra)
        all_trueRa.append(trueRa)
        all_trueDec.append(trueDec)
        all_sigma.append(sigma)
        #all_weight_sibyll.append(weight_SIBYLL)
        #all_weight_dpmjet.append(weight_DPMJET)

        all_type.append(particle_type)

        DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
        all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
        all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
        all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
        all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
        all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
        all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
        all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
        all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])

        DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
        all_cgen_x.append(data[DNN_name]['x'])
        all_cgen_y.append(data[DNN_name]['y'])
        all_cgen_z.append(data[DNN_name]['z'])
        all_cgen_time.append(data[DNN_name]['time'])
        all_cgen_zen.append(data[DNN_name]['zenith'])
        all_cgen_azi.append(data[DNN_name]['azimuth'])
        all_cgen_E.append(data[DNN_name]['energy'])

        #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
        #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
        
        DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
        all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

        #DNN_name = 'DeepLearningReco_event_selection_entering_01'
        #all_es_p_entering.append(data[DNN_name]['p_entering'])
                     

        DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
        all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
        
        #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
        #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

        #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
        #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
        
        DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
        all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

        DNN_name = 'DeepLearningReco_event_selection_03'
        all_es_03_starting.append(data[DNN_name]['p_starting'])

        DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
        all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


        #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
        #all_es_length.append(data[DNN_name]['Length'])
        #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
        
        DNN_name = 'DeepLearningReco_event_selection_track_length_02'
        all_es_length_02.append(data[DNN_name]['Length'])
        all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
        
        DNN_name = 'DeepLearningReco_dnn_export_cscdID'
        all_es_p_track.append(data[DNN_name]['p_is_track'])

        #DNN_name = 'DeepLearningReco_event_selection_pid_01'
        #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
        #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
        #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
        #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
        #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
        #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
        
        all_DNNlabels_p_starting.append(DNNlabels_p_starting)
        all_DNNlabels_p_entering.append(DNNlabels_p_entering)
        all_DNNlabels_true_x.append(DNNlabels_true_x)
        all_DNNlabels_true_y.append(DNNlabels_true_y)
        all_DNNlabels_true_z.append(DNNlabels_true_z)
        all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
        
        all_cscdl3_cont_tag.append(cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
            
        all_monopod_azi.append(monopod_azi)
        all_monopod_zen.append(monopod_zen)
        all_monopod_E.append(monopod_E)
        all_monopod_x.append(monopod_x)
        all_monopod_y.append(monopod_y)
        all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)


        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
       
        #cgen
        all_cgen_x = np.concatenate(all_cgen_x)
        all_cgen_y = np.concatenate(all_cgen_y)
        all_cgen_z = np.concatenate(all_cgen_z)
        all_cgen_time = np.concatenate(all_cgen_time)
        all_cgen_zen = np.concatenate(all_cgen_zen)
        all_cgen_azi = np.concatenate(all_cgen_azi)
        all_cgen_E = np.concatenate(all_cgen_E)
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_monopod_p_starting_300m_big_02 
        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_monopod_azi = np.concatenate(all_monopod_azi)
        all_monopod_zen = np.concatenate(all_monopod_zen)
        all_monopod_E = np.concatenate(all_monopod_E)
        all_monopod_x = np.concatenate(all_monopod_x)
        all_monopod_y = np.concatenate(all_monopod_y)
        all_monopod_z = np.concatenate(all_monopod_z)


        all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'sigma' :all_sigma, 
            'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}
        
        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)

        print('Saving...')
        if pullc:
            df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_testes.pickle') 
        else:
            #df.to_pickle('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_es_nopull.pickle') 
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_corsika_testes_nopull.hdf5', 'data') 
            print('saving nopullc...')



@cli.command()
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
def create_arrays_for_training(kind, systematics):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]
    all_truelength = []
    all_mjd = []

    all_weight=[] ; all_weight_sibyll = [] ; all_weight_dpmjet=[] 
    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            


    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]
                
    all_BDT_dnn_cscd_l3a_02_cascade_300m = [] ; all_BDT_preselection_01 = []
    all_BDT_dnn_cscd_l3a_01_cascade_300m = [] ;all_BDT_dnn_cscd_l3a_01 = []
    all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = []

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
    all_cscd_l3=[]        
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = []
    all_es_dnn_cscdl3b_starting_events_02 = []
    all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = []
    dataset_ids = []
    all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = [] ; all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = []


    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []
    all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01 = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = []
    all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = []
    all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = []
    all_es_egen_vertex_track_in_detector_length = []
    all_es_egen_vertex_track_in_detector_length_unc = []
    all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = []
    all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = []

    if kind=='nugen':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        for flavor in flavors:
            if flavor == 'NuE':
                did = 21217
            elif flavor == 'NuMu':
                did = 21218
            elif flavor == 'NuTau':
                did = 21219
            
            print('Flavor: {}'.format(flavor))
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                cscd_l3 = f.root.CscdL3.cols.value[:]
                
                ow/=ngen
                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length',
                            'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                print('Doing Unit Conversions')
                trueRa = a
                trueDec = z-np.pi/2.

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)
                
                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov'
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                all_BDT_preselection_01.append(BDT_preselection_01)
                all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(  all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        
        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'old_sigma' :all_sigma, 'dataset_id' : dataset_ids, 
            'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            'BDT_preselection_01' : all_BDT_preselection_01,
            'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
        
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_nugen_training.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='data':        
        print('Building dataframe for training BDT...')
        years = [2014, 2015]
        for year in years:
            print('year: {}'.format(year))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_02/exp/{}/*.hdf5'.format(year))
            for filename in filenames:
                f = tables.open_file (filename)
                print('total runs: {}'.format(len(np.unique(f.root.I3EventHeader.cols.Run[:]))))

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                mjd = f.root.I3EventHeader.cols.time_start_mjd[:]                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                

                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_mjd.append(mjd)
                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_mjd=np.concatenate(all_mjd)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''    
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_mjd, 
            'ra': all_ra, 'dec' :all_dec, 
            #'old_sigma' :all_sigma,
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01}
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_data_training.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='muongun':        
        print('Building dataframe for training BDT...')
        dids = [12370, 12401, 21315, 21316, 21317, 21318, 21319, 77001, 77002, 77003, 'high_energy', 'low_energy']
        #dids = [21315, 21316, 21317, 21318, 21319]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            if did == 'low_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 'high_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 12370:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/MuonGun/{}/0.99_eff/*.hdf5'.format(did))

            else:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/MuonGun/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            #print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            #print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   
    
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                cscd_l3 = f.root.CscdL3.cols.value[:]

                dataset_id = np.ones(len(z))*did

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])

                n_events_per_run = np.unique(f.root.weights_meta_info.cols.n_events_per_run[:])
            
                if np.greater(len(nfiles), 1):
                    print('Check n-files.  All events should have the same n_files')
                
                print ('{} nfiles={} total_nfiles = {}'.format(filename,  nfiles, total_n_files))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
            
                weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files
                #weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                #weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files

                weight=weight_SIBYLL + weight_DPMJET
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

            

                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length',
                            'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                print('Doing Unit Conversions')
                trueRa = a
                trueDec = z-np.pi/2.

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_sigma.append(sigma)
                all_weight_sibyll.append(weight_SIBYLL)
                all_weight_dpmjet.append(weight_DPMJET)
                all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)

                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)

                #DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
                #all_cgen_x.append(data[DNN_name]['x'])
                #all_cgen_y.append(data[DNN_name]['y'])
                #all_cgen_z.append(data[DNN_name]['z'])
                #all_cgen_time.append(data[DNN_name]['time'])
                #all_cgen_zen.append(data[DNN_name]['zenith'])
                #all_cgen_azi.append(data[DNN_name]['azimuth'])
                #all_cgen_E.append(data[DNN_name]['energy'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
                #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])
                

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                            
                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov'
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)

        dataset_ids = np.concatenate(dataset_ids)
        all_truelength = np.concatenate(all_truelength)

        all_cscd_l3 = np.concatenate(all_cscd_l3)
        

        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
        

       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)



        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            'cscdl3' : all_cscd_l3,  
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, #'sigma' : all_circ_unc_cov_sand,
            'weight_sibyll': all_weight_sibyll, 'weight_dpmjet' : all_weight_dpmjet, 'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_training.hdf5', 'data') 
        print('Saving...')
    elif kind=='corsika':        
        print('Building dataframe for training BDT...')
        dids = [11058, 11057]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_01/Corsika/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   

                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                print(nfiles, total_n_files)
                weight = f.root.weights.cols.GaisserH4aWeight[:] #/ (nfiles)
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]
                dataset_id = np.ones(len(Run))*did

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                cscd_l3 = f.root.CscdL3.cols.value[:]
        

                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length',
                            'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', 'lengthindetector', 'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                
                #monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
                #monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
                #monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
                #monopod_x = f.root.L3_MonopodFit4.cols.x[:]
                #monopod_y = f.root.L3_MonopodFit4.cols.y[:]
                #monopod_z = f.root.L3_MonopodFit4.cols.z[:]

                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
                

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')


                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_sigma.append(sigma)
                #all_weight_sibyll.append(weight_SIBYLL)
                #all_weight_dpmjet.append(weight_DPMJET)
        
                all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)
                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)

                #DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
                #all_cgen_x.append(data[DNN_name]['x'])
                #all_cgen_y.append(data[DNN_name]['y'])
                #all_cgen_z.append(data[DNN_name]['z'])
                #all_cgen_time.append(data[DNN_name]['time'])
                #all_cgen_zen.append(data[DNN_name]['zenith'])
                #all_cgen_azi.append(data[DNN_name]['azimuth'])
                #all_cgen_E.append(data[DNN_name]['energy'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
                #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                            
                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov'
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'                    
                    #DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    '''


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)
        all_cscd_l3 = np.concatenate(all_cscd_l3)
        all_truelength = np.concatenate(all_truelength)
        dataset_ids = np.concatenate(dataset_ids)

        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
       
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            #all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            #all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            #all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            #all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            #all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            #all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            #all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            #all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            #all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            #all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            #all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            #all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)


        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            'cscdl3' : all_cscd_l3,     
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids,# 'sigma' : all_circ_unc_cov_sand,
            'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('saving ...')
        
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_corsika_training.hdf5', 'data') 

@cli.command()
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
def create_arrays_for_dir_only(kind, systematics):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]
    all_truelength = []
    all_mjd = []
    all_BDT_Muon = [] 
    all_BDT_Cascade = []

    all_weight=[] ; all_weight_sibyll = [] ; all_weight_dpmjet=[] 
    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            


    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]
                
    all_BDT_dnn_cscd_l3a_02_cascade_300m = [] ; all_BDT_preselection_01 = []
    all_BDT_dnn_cscd_l3a_01_cascade_300m = [] ;all_BDT_dnn_cscd_l3a_01 = []
    all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = []

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
    all_cscd_l3=[]        
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = []
    all_es_dnn_cscdl3b_starting_events_02 = []
    all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = []
    dataset_ids = []
    all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = [] ; all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = []


    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []

    if kind=='nugen':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']
        for flavor in flavors:
            if flavor == 'NuE':
                did = 21217
            elif flavor == 'NuMu':
                did = 21218
            elif flavor == 'NuTau':
                did = 21219
            print('Flavor: {}'.format(flavor))
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/to_delete/egenerator_test_event_selection/test_01__new_models2/NuGen/{}/*/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                cscd_l3 = f.root.CscdL3.cols.value[:]
                
                ow/=ngen
                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02']


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length']

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle',
                    #'EventGenerator_test_marginalized_01' 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            #keys = ['azimuth_azimuth', 'zenith_zenith']
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_icecube[:]
                
                BDT_Muon = f.root['BDT_bdt_max_depth_5_n_est_2000lr_0.02_seed_3_train_size_50'].cols.pred_001[:]
                BDT_Cascade = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]

           
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                print('Doing Unit Conversions')
                trueRa = a
                trueDec = z-np.pi/2.

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)
                
                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))

                all_BDT_Muon.append(BDT_Muon)
                all_BDT_Cascade.append(BDT_Cascade)

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                all_BDT_preselection_01.append(BDT_preselection_01)
                all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
              

  
        all_BDT_Muon = np.concatenate(all_BDT_Muon)
        all_BDT_Cascade = np.concatenate(all_BDT_Cascade)
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(  all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'old_sigma' :all_sigma, 'dataset_id' : dataset_ids, 
            'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'unc_cov' : all_circ_unc_cov, 'unc_cov_fit' : all_circ_unc_cov_fit, 'unc_sand' : all_circ_unc_cov_sand, 'unc_sand_fit' : all_circ_unc_cov_sand_fit,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_muscore' : all_BDT_Muon, 'BDT_cscore' : all_BDT_Cascade,
            'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            'BDT_preselection_01' : all_BDT_preselection_01,
            'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
        
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_nugen_alldir.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='data':        
        print('Building dataframe for training BDT...')
        years = [2013, 2014]
        for year in years:
            print('year: {}'.format(year))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/exp/{}/*.hdf5'.format(year))
            for filename in filenames:
                f = tables.open_file (filename)
                print('total runs: {}'.format(len(np.unique(f.root.I3EventHeader.cols.Run[:]))))

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                mjd = f.root.I3EventHeader.cols.time_start_mjd[:]                
                cscd_l3 = f.root.CscdL3.cols.value[:]
                
                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02']


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length']

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN
                    

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_icecube[:]
                
                
                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['azimuth']
                dec= unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_mjd.append(mjd)
                all_dec.append(dec)
                all_ra.append(ra)

                all_sigma.append(sigma)

                all_cscd_l3.append(cscd_l3)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_BFRv1Spice321__small_01'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_mjd=np.concatenate(all_mjd)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_sigma=np.concatenate(all_sigma)

        all_cscd_l3 = np.concatenate(all_cscd_l3)

        #DNNMESE
        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(  all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)

                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_mjd, 
            'ra': all_ra, 'dec' :all_dec, 
            'old_sigma' :all_sigma,
            'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
        
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_data_training.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='muongun':        
        print('Building dataframe for training BDT...')
        dids = [12370, 12401, 21315, 21316, 21317, 21318, 21319, 77001, 77002, 77003] #, 'high_energy', 'low_energy']
        #dids = [21315, 21316, 21317, 21318, 21319]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            if did == 'low_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 'high_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 12370:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/MuonGun/{}/0.99_eff/*.hdf5'.format(did))

            else:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/MuonGun/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   
    
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                cscd_l3 = f.root.CscdL3.cols.value[:]

                dataset_id = np.ones(len(z))*did

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])

                n_events_per_run = np.unique(f.root.weights_meta_info.cols.n_events_per_run[:])
            
                if np.greater(len(nfiles), 1):
                    print('Check n-files.  All events should have the same n_files')
                
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
            
                weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files

                weight=weight_SIBYLL + weight_DPMJET
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

            

                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02']


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length']

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_icecube[:]
                
                #monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
                #monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
                #monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
                #monopod_x = f.root.L3_MonopodFit4.cols.x[:]
                #monopod_y = f.root.L3_MonopodFit4.cols.y[:]
                #monopod_z = f.root.L3_MonopodFit4.cols.z[:]

                BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                ra = unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['azimuth']
                dec= unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_sigma.append(sigma)
                all_weight_sibyll.append(weight_SIBYLL)
                all_weight_dpmjet.append(weight_DPMJET)
                all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)

                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)

                #DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
                #all_cgen_x.append(data[DNN_name]['x'])
                #all_cgen_y.append(data[DNN_name]['y'])
                #all_cgen_z.append(data[DNN_name]['z'])
                #all_cgen_time.append(data[DNN_name]['time'])
                #all_cgen_zen.append(data[DNN_name]['zenith'])
                #all_cgen_azi.append(data[DNN_name]['azimuth'])
                #all_cgen_E.append(data[DNN_name]['energy'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
                #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])
                

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                            
                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_BFRv1Spice321__small_01'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                all_BDT_preselection_01.append(BDT_preselection_01)
                all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)

        dataset_ids = np.concatenate(dataset_ids)
        all_truelength = np.concatenate(all_truelength)

        all_cscd_l3 = np.concatenate(all_cscd_l3)
        

        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
        

       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)
        all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            'cscdl3' : all_cscd_l3,  
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 'sigma' : all_circ_unc_cov_sand,
            'weight_sibyll': all_weight_sibyll, 'weight_dpmjet' : all_weight_dpmjet, 'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            'BDT_preselection_01' : all_BDT_preselection_01,
            'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_training.hdf5', 'data') 
        print('Saving...')
    elif kind=='corsika':        
        print('Building dataframe for training BDT...')
        dids = [11058, 11057]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_03/Corsika/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.Length[:]   

                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                weight = f.root.weights.cols.GaisserH4aWeight[:] / (nfiles)
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]
                dataset_id = np.ones(len(Run))*did

                cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                cscd_l3 = f.root.CscdL3.cols.value[:]
        

                DNN_names = ['DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            'DeepLearningReco_dnn_export_cscdID', 
                            'DeepLearningReco_event_selection_03', 
                            'DeepLearningReco_event_selection_cscdl3_02',
                            'DeepLearningReco_event_selection_cscdl3_big_03',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_track_length_02']


                DNN_types = ['dir', 'starting_300m', 'is_track', 
                            'starting', 'starting', 
                            'starting', 'starting_300m',  
                            'starting_300m', 'starting_cascade_L25_D300',
                            'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            'starting',

                            'starting_300m',
                            'starting_300m',
                            'length']

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit']

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc']
                    for index, UNC_name in enumerate(UNC_names):
                        print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_Qtot_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_Qtot_SplitInIcePulses[:]
                #cscdSBU_MaxQtotRatio_SplitInIcePulses = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MaxQtotRatio_SplitInIcePulses[:]
                cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_EarlyDOMs = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cscdSBU_EarlyDOMs[:]
                cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_MonopodFit4_delay_vac = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_MonopodFit4_PartialExclusion_Delay_vac[:]
                #cscdSBU_VetoMaxDomChargeOM = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_VetoMaxDomChargeOM[:]
                cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_I3XYScale[:]
                cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_PolygonContTag = f.root.cscdSBU_I3Double_CascadeGeneratorReco_SpiceLea_50cm_I3Particle.cols.cscdSBU_PolygonContTag_MonopodFit4_PartialExclusion[:]
                cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_deepcore[:]
                cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_BFRv1Spice321__small_01_I3Particle.cols.distance_icecube[:]
                
                #monopod_azi = f.root.L3_MonopodFit4.cols.azimuth[:]
                #monopod_zen= f.root.L3_MonopodFit4.cols.zenith[:]
                #monopod_E = f.root.L3_MonopodFit4.cols.energy[:]
                #monopod_x = f.root.L3_MonopodFit4.cols.x[:]
                #monopod_y = f.root.L3_MonopodFit4.cols.y[:]
                #monopod_z = f.root.L3_MonopodFit4.cols.z[:]

                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
                

                BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                ra = unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['azimuth']
                dec= unc['EventGenerator_cascade_7param_BFRv1Spice321__small_01']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')


                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_sigma.append(sigma)
                #all_weight_sibyll.append(weight_SIBYLL)
                #all_weight_dpmjet.append(weight_DPMJET)
        
                all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)
                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                all_DNNMESE_x_un.append(dir_x_unc)
                all_DNNMESE_y_un.append(dir_y_unc)
                all_DNNMESE_z_un.append(dir_z_unc)

                #DNN_name='CascadeGeneratorReco_SpiceLea_50cm_I3Particle'
                #all_cgen_x.append(data[DNN_name]['x'])
                #all_cgen_y.append(data[DNN_name]['y'])
                #all_cgen_z.append(data[DNN_name]['z'])
                #all_cgen_time.append(data[DNN_name]['time'])
                #all_cgen_zen.append(data[DNN_name]['zenith'])
                #all_cgen_azi.append(data[DNN_name]['azimuth'])
                #all_cgen_E.append(data[DNN_name]['energy'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_02'
                #all_es_300m_p_starting_300m_02.append(data[DNN_name]['p_starting_300m'])
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                            
                DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name= 'EventGenerator_cascade_7param_BFRv1Spice321__small_01'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + (var_azimuth * np.sin(egen_zenith)**2)) / np.sqrt(2.))


                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_03'
                all_es_03_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                all_es_length_02.append(data[DNN_name]['Length'])
                all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                all_BDT_preselection_01.append(BDT_preselection_01)
                all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)
        all_cscd_l3 = np.concatenate(all_cscd_l3)
        all_truelength = np.concatenate(all_truelength)
        dataset_ids = np.concatenate(dataset_ids)

        all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
        all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
       
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
                
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
                
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        all_es_p_track = np.concatenate(all_es_p_track)
        all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        all_es_03_starting = np.concatenate(all_es_03_starting)
        all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)

        all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)

        #pid 

        #all_es_pid_p_starting_cc_e = np.concatenate(all_es_pid_p_starting_cc_e)
        #all_es_pid_p_starting_cc_e_unc = np.concatenate(all_es_pid_p_starting_cc_e_unc)
        #all_es_pid_p_starting_cc_mu = np.concatenate(all_es_pid_p_starting_cc_mu)
        #all_es_pid_p_starting_cc_mu_unc = np.concatenate(all_es_pid_p_starting_cc_mu_unc)
        #all_es_pid_p_starting_cc_tau = np.concatenate(all_es_pid_p_starting_cc_tau)
        #all_es_pid_p_starting_cc_tau_unc = np.concatenate(all_es_pid_p_starting_cc_tau_unc)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_Qtot_SplitInIcePulses=np.concatenate(all_cscdSBU_Qtot_SplitInIcePulses)
        #all_cscdSBU_MaxQtotRatio_SplitInIcePulses=np.concatenate(all_cscdSBU_MaxQtotRatio_SplitInIcePulses)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_EarlyDOMs=np.concatenate(all_cscdSBU_EarlyDOMs)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_MonopodFIt4_delay_vac=np.concatenate(all_cscdSBU_MonopodFIt4_delay_vac)
        #all_cscdSBU_VetoMaxDomChargeOM=np.concatenate(all_cscdSBU_VetoMaxDomChargeOM)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_PolygonContTag=np.concatenate(all_cscdSBU_PolygonContTag)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        

        all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            'cscdl3' : all_cscd_l3,     
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 'sigma' : all_circ_unc_cov_sand,
            'weight' : all_weight, 
            'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            'BDT_preselection_01' : all_BDT_preselection_01,
            'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX, 
            'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('saving ...')
        
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_corsika_training.hdf5', 'data') 

@cli.command()
@click.option('--season', default='IC86_2013', type=str)
@click.option('--systematics', default=None, type=str)
def propegate_uncertainties(season):
    if systematics:
        pass
    else:
        data = pd.read_hdf('/data/user/ssclafani/data/cscd/{}/{}_data_es_test.hdf5'.format(season, season)) 
    #dir_x = data.DNNMESE_x 
    #dir_y = data.DNNMESE_y 
    #dir_z = data.DNNMESE_z
    dir_x_unc = np.abs(data.DNNMESE_x_unc)
    dir_y_unc = np.abs(data.DNNMESE_y_unc)
    dir_z_unc = np.abs(data.DNNMESE_z_unc)

    #dir_x = np.clip (dir_x, -1, 1)
    #dir_y = np.clip (dir_y, -1, 1)
    #dir_z = np.clip (dir_z, -1, 1)
    dir_x_unc = np.maximum (dir_x_unc, 1e-3)
    dir_y_unc = np.maximum (dir_y_unc, 1e-3)
    dir_z_unc = np.maximum (dir_z_unc, 1e-3)
    # note: fancier calibration better, but this is good enough for now
    print('making array')
    u_dir_x = unp.uarray( np.clip(data.DNNMESE_x, -1, 1), dir_x_unc)
    u_dir_y = unp.uarray(  np.clip(data.DNNMESE_y, -1, 1), dir_y_unc)
    u_dir_z = unp.uarray( np.clip(data.DNNMESE_z, -1, 1), dir_z_unc)

    print('calculating length')
    # calculate zenith and azimuth
    dir_length = unp.sqrt( unp.pow(u_dir_x , 2) + unp.pow(u_dir_y , 2) + unp.pow( u_dir_z , 2 ))
    u_dir_x_normed = u_dir_x / dir_length
    u_dir_y_normed = u_dir_y / dir_length
    # dir_z and zenith is independent of x and y and shouldnt be normalized
    #u_dir_z_normed = u_dir_z / dir_length
    u_dir_z[u_dir_z > 1.] = 1.
    u_dir_z[u_dir_z < -1.] = -1.
    # calculate uncertainties
    print('doing trig')
    zenith_u = unp.arccos( u_dir_z )
    azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
    zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
    print('calculating sigma')
    sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
    sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
    data['sigma'] = np.maximum (sigma, np.radians (np.sqrt (3)))
    data.to_hdf('/data/user/ssclafani/data/cscd/{}/{}_data_es_test.hdf5'.format(season, season), 'data') 

@cli.command()
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
def create_arrays_for_testing(kind, systematics):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]
    all_truelength = []
    all_mjd = []

    all_weight=[] ; all_weight_sibyll = [] ; all_weight_dpmjet=[] 
    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            


    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]
                
    all_BDT_dnn_cscd_l3a_02_cascade_300m = [] ; all_BDT_preselection_01 = []
    all_BDT_dnn_cscd_l3a_01_cascade_300m = [] ;all_BDT_dnn_cscd_l3a_01 = []
    all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = []

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
    all_cscd_l3=[]        
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = []
    all_es_dnn_cscdl3b_starting_events_02 = []
    all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = []
    dataset_ids = []
    all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = [] ; all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = []

    all_snowstorm_parameters = [] ; all_snowstorm_vectors = []
    all_snowstorm_scattering = [] ; all_snowstorm_absorption = [] ; all_snowstorm_anisotropy_scale = []
    all_snowstorm_DOM_efficiency = [] ; 
    all_snowstorm_holeice_forward_unified_00 = [] ; all_snowstorm_holeice_forward_unified_01 = []

    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []
    all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01 = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = []
    all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = []
    all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = []
    all_es_egen_vertex_track_in_detector_length = []
    all_es_egen_vertex_track_in_detector_length_unc = []
    all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = []
    all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = []

    all_BDT_final_starting_300m_01 = []
    all_event_selection_cascade_zenith = [] ; all_event_selection_cascade_azimuth = []; all_event_selection_cascade_energy = []; all_event_selection_cascade_time = []

    if kind=='nugen':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        for flavor in flavors:
            if flavor == 'NuE':
                did = 21217
            elif flavor == 'NuMu':
                did = 21218
            elif flavor == 'NuTau':
                did = 21219
            
            print('Flavor: {}'.format(flavor))
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                

                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                

                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)
                
                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)


    
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        print('concatenating new stuff?')
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_nugen_val.hdf5', 'data') 
    if kind=='nugen_snowstorm':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        dids = [21430, 21431, 21432, 21468, 21469, 21470, 21471, 21472, 21473]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_03/NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                snowstorm_index = f.root.SnowstormParameters.cols.vector_index[:]  
                snowstorm_vector = f.root.SnowstormParameters.cols.item[:]  
                
                df_dict = {}

                parameter_names=[
                'Scattering', 'Absorption', 'AnisotropyScale', 
                'DOMEfficiency', 'HoleIceForward_Unified_00', 
                'HoleIceForward_Unified_01',]
                for index in np.unique(snowstorm_index):
                    mask = (snowstorm_index == index)
                    df_dict[parameter_names[index]]  = snowstorm_vector[mask]


                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                

                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                

                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)

                all_snowstorm_scattering.append (df_dict['Scattering'])
                all_snowstorm_absorption.append(df_dict['Absorption'])
                all_snowstorm_anisotropy_scale.append( df_dict['AnisotropyScale'])
                all_snowstorm_DOM_efficiency.append( df_dict['DOMEfficiency'])
                all_snowstorm_holeice_forward_unified_00.append( df_dict['HoleIceForward_Unified_00'])
                all_snowstorm_holeice_forward_unified_01.append(df_dict['HoleIceForward_Unified_01'])


                #all_cscd_l3.append(cscd_l3)



                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)


    
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        all_snowstorm_scattering = np.concatenate( all_snowstorm_scattering)
        all_snowstorm_absorption = np.concatenate( all_snowstorm_absorption)
        all_snowstorm_anisotropy_scale = np.concatenate(all_snowstorm_anisotropy_scale)
        all_snowstorm_DOM_efficiency = np.concatenate(all_snowstorm_DOM_efficiency)
        all_snowstorm_holeice_forward_unified_00 = np.concatenate( all_snowstorm_holeice_forward_unified_00)
        all_snowstorm_holeice_forward_unified_01 = np.concatenate( all_snowstorm_holeice_forward_unified_01)
        
        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ =np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'snowstorm_Scattering' : all_snowstorm_scattering,
            'snowstorm_Absorption' : all_snowstorm_absorption,
            'snowstorm_AnisotropyScale' : all_snowstorm_anisotropy_scale,
            'snowstorm_DOMEfficiency' : all_snowstorm_DOM_efficiency,
            'snowstorm_HoleIceForward_Unified_00' : all_snowstorm_holeice_forward_unified_00,
            'snowstorm_HoleIceForward_Unified_01' : all_snowstorm_holeice_forward_unified_01,
        
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_nugen_snowstorm_val.hdf5', 'data') 
    elif kind=='data':        
        print('Building dataframe for training BDT...')
        years = [2014, 2015]
        for year in years:
            print('year: {}'.format(year))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/training_data_filtered_02/exp/{}/*.hdf5'.format(year))
            for filename in filenames:
                f = tables.open_file (filename)
                print('total runs: {}'.format(len(np.unique(f.root.I3EventHeader.cols.Run[:]))))

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                mjd = f.root.I3EventHeader.cols.time_start_mjd[:]                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                

                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_mjd.append(mjd)
                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_mjd=np.concatenate(all_mjd)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''    
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
#u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
#u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_mjd, 
            'ra': all_ra, 'dec' :all_dec, 
            #'old_sigma' :all_sigma,
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time}
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        if systematics:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_spice3.hdf5', 'data') 
        else:
            df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_data_training.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_allDNN.hdf5', 'data') 
                #df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_mc_estest_nopull.hdf5', 'data') 
        print('saving pullc...')
    elif kind=='muongun':        
        print('Building dataframe for training BDT...')
        dids = [12370, 12401, 21315, 21316, 21317, 21318, 21319, 77001, 77002, 77003, 'high_energy', 'low_energy']
        #dids = [21315, 21316, 21317, 21318, 21319]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            if did == 'low_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 'high_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 12370:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/MuonGun/{}/0.99_eff/*.hdf5'.format(did))

            else:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/MuonGun/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            #print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            #print('total n_files: {}'.format(total_n_files))
            for filename in sorted(filenames):
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   
    
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]

                dataset_id = np.ones(len(z))*did

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])

                n_events_per_run = np.unique(f.root.weights_meta_info.cols.n_events_per_run[:])
            
                if np.greater(len(nfiles), 1):
                    print('Check n-files.  All events should have the same n_files')
                
                print ('{} nfiles={} total_nfiles = {}'.format(filename,  nfiles, total_n_files))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
            
                weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files
                #weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                #weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files

                weight=weight_SIBYLL + weight_DPMJET
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

            

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                

                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                trueRa = a
                trueDec = z-np.pi/2.

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                #all_sigma.append(sigma)
                all_weight_sibyll.append(weight_SIBYLL)
                all_weight_dpmjet.append(weight_DPMJET)
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)

                #all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)
                

                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                #all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                #all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                #all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                #all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                #all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                #all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                #all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)

        dataset_ids = np.concatenate(dataset_ids)
        all_truelength = np.concatenate(all_truelength)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)
        
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        #all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        #all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        #all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        #all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )
        print(all_BDT_final_starting_300m_01)
        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            #'cscdl3' : all_cscd_l3,  
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, #'sigma' : all_circ_unc_cov_sand,
            'weight_sibyll': all_weight_sibyll, 'weight_dpmjet' : all_weight_dpmjet, 'weight' : all_weight, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX} 
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_muongun_val.hdf5', 'data') 
        print('Saving...')
    elif kind=='corsika':        
        print('Building dataframe for training BDT...')
        dids = [11058, 11057,20788, 20789, 20848, 20849, 20852, 20881, 20891, 20904]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            #filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_02/Corsika/{}/*.hdf5'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_03/Corsika/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                print(nfiles, total_n_files)
                weight = f.root.weights.cols.GaisserH4aWeight[:] #/ (nfiles)
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]
                dataset_id = np.ones(len(Run))*did

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]
        

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]

                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
                

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                #all_sigma.append(sigma)
                #all_weight_sibyll.append(weight_SIBYLL)
                #all_weight_dpmjet.append(weight_DPMJET)
        
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)
                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                #all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                #all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                #all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                #all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)
        print('concatenating')

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)
        #all_cscd_l3 = np.concatenate(all_cscd_l3)
        all_truelength = np.concatenate(all_truelength)
        dataset_ids = np.concatenate(dataset_ids)

        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        #all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        #all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        #all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        #all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        #all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        #all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        #all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        #all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        #all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        #all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        #all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)


        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            #'cscdl3' : all_cscd_l3,     
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids,# 'sigma' : all_circ_unc_cov_sand,
            'weight' : all_weight, 
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX} 

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('saving ...')
        
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_corsika_val_all.hdf5', 'data') 
    elif kind=='genie':        
        print('Building dataframe for training BDT...')

        dids = [12463, 12475] 
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/GENIE/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                dataset_id = np.ones(len(Run))*did
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)
                dataset_ids.append(dataset_id)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                
                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )


        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_genie_val.hdf5', 'data') 


@cli.command()
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
def create_arrays_for_sens(kind, systematics):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]
    all_truelength = []
    all_mjd = []

    all_weight=[] ; all_weight_sibyll = [] ; all_weight_dpmjet=[] 
    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            


    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]
                
    all_BDT_dnn_cscd_l3a_02_cascade_300m = [] ; all_BDT_preselection_01 = []
    all_BDT_dnn_cscd_l3a_01_cascade_300m = [] ;all_BDT_dnn_cscd_l3a_01 = []
    all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = []

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
    all_cscd_l3=[]        
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = []
    all_es_dnn_cscdl3b_starting_events_02 = []
    all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = []
    dataset_ids = []
    all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = [] ; all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = []


    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []
    all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01 = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = []
    all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = []
    all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = []
    all_es_egen_vertex_track_in_detector_length = []
    all_es_egen_vertex_track_in_detector_length_unc = []
    all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = []
    all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = []

    all_BDT_final_starting_300m_01 = []
    all_event_selection_cascade_zenith = [] ; all_event_selection_cascade_azimuth = []; all_event_selection_cascade_energy = []; all_event_selection_cascade_time = []
    all_snowstorm_parameters = [] ; all_snowstorm_vectors = []                                              
    all_snowstorm_scattering = [] ; all_snowstorm_absorption = [] ; all_snowstorm_anisotropy_scale = []     
    all_snowstorm_DOM_efficiency = [] ;                                                                     
    all_snowstorm_holeice_forward_unified_00 = [] ; all_snowstorm_holeice_forward_unified_01 = []           
    all_mu_score = []

    if kind=='nugen':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        for flavor in flavors:
            if flavor == 'NuE':
                did = 21217
            elif flavor == 'NuMu':
                did = 21218
            elif flavor == 'NuTau':
                did = 21219
            
            print('Flavor: {}'.format(flavor))
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                

                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 

                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)
                
                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)


    
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 

        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        print('concatenating new stuff?')
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            'sigma' : all_circ_unc_cov_sand,# 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        df.to_hdf('/data/user/ssclafani/data/cscd/final/val_nugen_dir.hdf5', 'data') 
    elif kind=='nugen_snowstorm':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        dids = [21430, 21431, 21432, 21468, 21469, 21470, 21471, 21472, 21473]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04__loose_cut/NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:]
                #c_score = f.root.BDT
 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                snowstorm_index = f.root.SnowstormParameters.cols.vector_index[:]  
                snowstorm_vector = f.root.SnowstormParameters.cols.item[:]  
                
                df_dict = {}

                parameter_names=[
                'Scattering', 'Absorption', 'AnisotropyScale', 
                'DOMEfficiency', 'HoleIceForward_Unified_00', 
                'HoleIceForward_Unified_01',]
                for index in np.unique(snowstorm_index):
                    mask = (snowstorm_index == index)
                    df_dict[parameter_names[index]]  = snowstorm_vector[mask]


                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                

                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                

                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)
                all_mu_score.append(mu_score)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                dataset_ids.append(dataset_id)

                all_snowstorm_scattering.append (df_dict['Scattering'])
                all_snowstorm_absorption.append(df_dict['Absorption'])
                all_snowstorm_anisotropy_scale.append( df_dict['AnisotropyScale'])
                all_snowstorm_DOM_efficiency.append( df_dict['DOMEfficiency'])
                all_snowstorm_holeice_forward_unified_00.append( df_dict['HoleIceForward_Unified_00'])
                all_snowstorm_holeice_forward_unified_01.append(df_dict['HoleIceForward_Unified_01'])


                #all_cscd_l3.append(cscd_l3)



                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)


    
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_mu_score = np.concatenate(all_mu_score)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        all_snowstorm_scattering = np.concatenate( all_snowstorm_scattering)
        all_snowstorm_absorption = np.concatenate( all_snowstorm_absorption)
        all_snowstorm_anisotropy_scale = np.concatenate(all_snowstorm_anisotropy_scale)
        all_snowstorm_DOM_efficiency = np.concatenate(all_snowstorm_DOM_efficiency)
        all_snowstorm_holeice_forward_unified_00 = np.concatenate( all_snowstorm_holeice_forward_unified_00)
        all_snowstorm_holeice_forward_unified_01 = np.concatenate( all_snowstorm_holeice_forward_unified_01)
        
        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ =np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'snowstorm_Scattering' : all_snowstorm_scattering,
            'snowstorm_Absorption' : all_snowstorm_absorption,
            'snowstorm_AnisotropyScale' : all_snowstorm_anisotropy_scale,
            'snowstorm_DOMEfficiency' : all_snowstorm_DOM_efficiency,
            'snowstorm_HoleIceForward_Unified_00' : all_snowstorm_holeice_forward_unified_00,
            'snowstorm_HoleIceForward_Unified_01' : all_snowstorm_holeice_forward_unified_01,
            'mu_score' : all_mu_score, 
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            'sigma' : all_circ_unc_cov_sand, #'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('sens nugen snowstorm')
        df.to_hdf('/data/user/ssclafani/data/cscd/final/sens_nugen_snowstorm_dir.hdf5', 'data') 
    elif kind=='data':        
        years = [2014, 2015]
        for year in years:
            print('year: {}'.format(year))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04__loose_cut/exp/{}/*.hdf5'.format(year))
            print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                print('total runs: {}'.format(len(np.unique(f.root.I3EventHeader.cols.Run[:]))))

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:]
                
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                mjd = f.root.I3EventHeader.cols.time_start_mjd[:]                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_mjd.append(mjd)
                all_dec.append(dec)
                all_ra.append(ra)
                all_mu_score.append(mu_score)
                #all_sigma.append(sigma)

                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_mjd=np.concatenate(all_mjd)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_mu_score = np.concatenate(all_mu_score)
        #all_sigma=np.concatenate(all_sigma)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_mjd, 
            'ra': all_ra, 'dec' :all_dec, 
            'mu_score' : all_mu_score,
            #'old_sigma' :all_sigma,
            'sigma' : all_circ_unc_cov_sand,# 'cscdl3' : all_cscd_l3,
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time}
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/final/val_data_dir.hdf5', 'data') 
    elif kind=='muongun':        
        print('Building dataframe for training BDT...')
        dids = [12370, 12401, 21315, 21316, 21317, 21318, 21319, 77001, 77002, 77003, 'high_energy', 'low_energy']
        #dids = [21315, 21316, 21317, 21318, 21319]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            if did == 'low_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 'high_energy':
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/MuonGun/{}/IC86_2013/l2/*.hdf5'.format(did))
            elif did == 12370:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/MuonGun/{}/0.99_eff/*.hdf5'.format(did))

            else:
                filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/MuonGun/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            #print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            #print('total n_files: {}'.format(total_n_files))
            for filename in sorted(filenames):
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   
    
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]

                dataset_id = np.ones(len(z))*did

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])

                n_events_per_run = np.unique(f.root.weights_meta_info.cols.n_events_per_run[:])
            
                if np.greater(len(nfiles), 1):
                    print('Check n-files.  All events should have the same n_files')
                
                print ('{} nfiles={} total_nfiles = {}'.format(filename,  nfiles, total_n_files))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
            
                weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files
                #weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                #weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files

                weight=weight_SIBYLL + weight_DPMJET
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

            

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]


                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                trueRa = a
                trueDec = z-np.pi/2.

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                #all_sigma.append(sigma)
                all_weight_sibyll.append(weight_SIBYLL)
                all_weight_dpmjet.append(weight_DPMJET)
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)

                #all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)
                

                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                #all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_Qtot_SplitInIcePulses.append(cscdSBU_Qtot_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_SplitInIcePulses.append(cscdSBU_MaxQtotRatio_SplitInIcePulses)
                #all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_EarlyDOMs.append(cscdSBU_EarlyDOMs)
                #all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_MonopodFIt4_delay_vac.append(cscdSBU_MonopodFit4_delay_vac)
                #all_cscdSBU_VetoMaxDomChargeOM.append(cscdSBU_VetoMaxDomChargeOM)
                #all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                #all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                #all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_PolygonContTag.append(cscdSBU_PolygonContTag)
                #all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                #all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)

        dataset_ids = np.concatenate(dataset_ids)
        all_truelength = np.concatenate(all_truelength)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)
        
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        #all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        #all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        #all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        #all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )
        print(all_BDT_final_starting_300m_01)
        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            #'cscdl3' : all_cscd_l3,  
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 'sigma' : all_circ_unc_cov_sand,
            'weight_sibyll': all_weight_sibyll, 'weight_dpmjet' : all_weight_dpmjet, 'weight' : all_weight, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX} 
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/final/val_muongun_dir.hdf5', 'data') 
        print('Saving...')
    elif kind=='corsika':        
        print('Building dataframe for training BDT...')
        dids = [11058, 11057]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/Corsika/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                print(nfiles, total_n_files)
                weight = f.root.weights.cols.GaisserH4aWeight[:] #/ (nfiles)
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]
                dataset_id = np.ones(len(Run))*did

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]
        

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.

                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
                

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                #interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                #print('Doing Unit Conversions')
                #MJD = 56293
                trueRa = a
                trueDec = z-np.pi/2.
                #trueRa, trueDec = astro.dir_to_equa(z, a, MJD)

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                #azi = data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['azimuth']
                #zen= data['CascadeGeneratorReco_SpiceLea_50cm_I3Particle']['zenith'] 

                #ra, dec = astro.dir_to_equa(azi, zen, MJD)
                '''
                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                #all_sigma.append(sigma)
                #all_weight_sibyll.append(weight_SIBYLL)
                #all_weight_dpmjet.append(weight_DPMJET)
        
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)
                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)

                #all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                #all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                #all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                #all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                #all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                #all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                #all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                #all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)

                #all_BDT_dnn_cscd_l3a_02_cascade_300m.append(BDT_dnn_cscd_l3a_02_cascade_300m)
                #all_BDT_preselection_01.append(BDT_preselection_01)
                #all_BDT_dnn_cscd_l3a_01_cascade_300m .append(BDT_dnn_cscd_l3a_01_cascade_300m)
                #all_BDT_dnn_cscd_l3a_01.append(BDT_dnn_cscd_l3a_01)
                #all_monopod_azi.append(monopod_azi)
                #all_monopod_zen.append(monopod_zen)
                #all_monopod_E.append(monopod_E)
                #all_monopod_x.append(monopod_x)
                #all_monopod_y.append(monopod_y)
                #all_monopod_z.append(monopod_z)
        print('concatenating')

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)
        #all_cscd_l3 = np.concatenate(all_cscd_l3)
        all_truelength = np.concatenate(all_truelength)
        dataset_ids = np.concatenate(dataset_ids)

        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        #all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        #all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        #all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        #all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        #all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        #all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        #all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        #all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        #all_monopod_azi = np.concatenate(all_monopod_azi)
        #all_monopod_zen = np.concatenate(all_monopod_zen)
        #all_monopod_E = np.concatenate(all_monopod_E)
        #all_monopod_x = np.concatenate(all_monopod_x)
        #all_monopod_y = np.concatenate(all_monopod_y)
        #all_monopod_z = np.concatenate(all_monopod_z)

        #all_es_monopod_p_starting_300m_big_02 = np.concatenate(all_es_monopod_p_starting_300m_big_02)
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        #all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        #all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        #all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        #all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        #all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        #all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        #all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)


        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)
        
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            #'cscdl3' : all_cscd_l3,     
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 'sigma' : all_circ_unc_cov_sand,
            'weight' : all_weight, 
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'circ_unc_sand' : all_circ_unc_cov_sand_fit,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_pid_p_starting_cc_e' : all_es_pid_p_starting_cc_e,  'DNN_es_pid_p_starting_cc_e_unc' : all_es_pid_p_starting_cc_e_unc,
            #'DNN_es_pid_p_starting_cc_mu' : all_es_pid_p_starting_cc_mu , 'DNN_es_pid_p_starting_cc_mu_unc' : all_es_pid_p_starting_cc_mu_unc,
            #'DNN_es_pid_p_starting_cc_tau' :all_es_pid_p_starting_cc_tau, 'DNN_es_pid_p_starting_cc_tau_unc' : all_es_pid_p_starting_cc_tau_unc,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX} 

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('saving ...')
        
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_corsika_val.hdf5', 'data') 
    elif kind=='genie':        
        print('Building dataframe for training BDT...')

        dids = [12463, 12475] 
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04/GENIE/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                dataset_id = np.ones(len(Run))*did
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle', 
                    #'EventGenerator_test_marginalized_01', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand', 
                    #'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    ]

                    UNC_types = [ 'Egen_nounc', #'Egen', 
                        #'unc', 'unc', 'unc', 'unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #CSCD_SBU VARIABLES
                #cscdSBU_Qtot_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_Qtot_HLC[:]
                #cscdSBU_MaxQtotRatio_HLC = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_MaxQtotRatio_HLC[:]
                #cscdSBU_VetoMaxDomChargeString = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoMaxDomChargeString[:] 
                #cscdSBU_VetoEarliestLayer = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoEarliestLayer[:]
                #cscdSBU_I3XYScale = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_I3XYScale[:]
                #cscdSBU_DepthFirstHit = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.cscdSBU_VetoDepthFirstHit[:]
                #cscdSBU_distance_deepcore = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_deepcore[:]
                #cscdSBU_distance_icecube = f.root.cscdSBU_I3Double_EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle.cols.distance_icecube[:]
                


                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                '''
                print('Doing Unit Conversions')

                ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['azimuth']
                dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle']['zenith'] - np.pi/2.

                dir_x = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX']
                dir_y = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY']
                dir_z = data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ']
                dir_x_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionX_uncertainty'] )
                dir_y_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionY_uncertainty'] )
                dir_z_unc = np.abs(data['DeepLearningReco_mese_v2__all_gl_both2']['PrimaryDirectionZ_uncertainty'] )
                dir_x = np.clip (dir_x, -1, 1)
                dir_y = np.clip (dir_y, -1, 1)
                dir_z = np.clip (dir_z, -1, 1)
                dir_x_unc = np.maximum (dir_x_unc, 1e-3)
                dir_y_unc = np.maximum (dir_y_unc, 1e-3)
                dir_z_unc = np.maximum (dir_z_unc, 1e-3)

                # note: fancier calibration better, but this is good enough for now

                u_dir_x = unp.uarray( dir_x, dir_x_unc)
                u_dir_y = unp.uarray( dir_y, dir_y_unc)
                u_dir_z = unp.uarray( dir_z, dir_z_unc)

                # calculate zenith and azimuth
                dir_length = unp.sqrt( u_dir_x**2 + u_dir_y**2 + u_dir_z**2 )
                u_dir_x_normed = u_dir_x / dir_length
                u_dir_y_normed = u_dir_y / dir_length
                # dir_z and zenith is independent of x and y and shouldnt be normalized
                #u_dir_z_normed = u_dir_z / dir_length
                u_dir_z[u_dir_z > 1.] = 1.
                u_dir_z[u_dir_z < -1.] = -1.
                # calculate uncertainties
                zenith_u = unp.arccos( u_dir_z )
                azimuth_u = (unp.arctan2(u_dir_y_normed, u_dir_x_normed) + 2 * np.pi) % (2 * np.pi)
                zenith, azimuth = unp.nominal_values (zenith_u), unp.nominal_values (azimuth_u)
                sigma_zenith, sigma_azimuth = unp.std_devs (zenith_u), unp.std_devs (azimuth_u)
                sigma = np.sqrt (sigma_zenith**2 + sigma_azimuth**2 * np.sin (zenith)**2) / np.sqrt (2)
                sigma = np.maximum (sigma, np.radians (np.sqrt (3)))
                print('Done')
                '''
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)
                dataset_ids.append(dataset_id)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                
                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_300m_01'
                #all_es_300m_p_starting_300m_01.append(data[DNN_name]['p_starting_300m'])

                #DNN_name='DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_p_starting_cscd_l3_big_02.append(data[DNN_name]['p_starting'])
                
                #DNN_name='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03'
                #all_es_p_starting_dnn_cscd_l3a_03.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01'
                #all_es_p_starting_cscd_mp_starting_cascades_big_01.append(data[DNN_name]['p_starting_cascade_L25_D300'])
    
                #DNN_name='DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_p_starting_cscd_mp_starting_events_big_02.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02' 
                #all_es_dnn_cscdl3b_starting_cascades_big_strict_02.append(data[DNN_name]['p_starting_cascade_L100_D300'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02' 
                #all_es_dnn_cscdl3b_starting_events_02.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01__bfgs_gtol_10_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    #all_egen_circ_unc.append(unc[DNN_name]['circular_unc'])
                    
                    #DNN_name='EventGenerator_test_marginalized_01'
                    #all_egen_marginalized_x.append(unc[DNN_name]['x'])
                    #all_egen_marginalized_y.append(unc[DNN_name]['y'])
                    #all_egen_marginalized_z.append(unc[DNN_name]['z'])
                    #all_egen_marginalized_time.append(unc[DNN_name]['time'])
                    #egen_marginalized_zenith = unc[DNN_name]['zenith']
                    #all_egen_marginalized_zen.append(unc[DNN_name]['zenith'])
                    #all_egen_marginalized_azi.append(unc[DNN_name]['azimuth'])
                    #all_egen_marginalized_E.append(unc[DNN_name]['energy'])
                    #all_egen_marginalized_circ_unc.append(unc[DNN_name]['circular_unc'])
                    '''
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov.append(var_zenith)
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_fit.append(var_zenith)
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand.append(var_zenith)
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_BFRv1Spice321__small_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['azimuth_azimuth']
                    all_azi_unc_cov_sand_fit.append(var_azimuth)
                    var_zenith = unc[DNN_name]['zenith_zenith']
                    all_zen_unc_cov_sand_fit.append(var_zenith)
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    '''

                #DNN_name = 'DeepLearningReco_event_selection_entering_01'
                #all_es_p_entering.append(data[DNN_name]['p_entering'])
                             

                #DNN_name = 'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02'
                #all_es_monopod_p_starting_300m_big_02.append(data[DNN_name]['p_starting_300m'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_300m_02'
                #all_es_cscdl2_300m_starting.append(data[DNN_name]['p_starting_300m'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl2_0m_02'
                #all_es_cscdl2_0m_starting.append(data[DNN_name]['p_starting'])
                
                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_02'
                #all_es_cscdl3_02_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_03'
                #all_es_03_starting.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_cscdl3_big_03'
                #all_es_cscdl2_big_starting.append(data[DNN_name]['p_starting'])

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #DNN_name = 'DeepLearningReco_event_selection_track_length_01'
                #all_es_length.append(data[DNN_name]['Length'])
                #all_es_length_log_unc.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_event_selection_track_length_02'
                #all_es_length_02.append(data[DNN_name]['Length'])
                #all_es_length_log_unc_02.append(data[DNN_name]['Length_log_uncertainty'])
                
                #DNN_name = 'DeepLearningReco_dnn_export_cscdID'
                #all_es_p_track.append(data[DNN_name]['p_is_track'])

                #DNN_name = 'DeepLearningReco_event_selection_pid_01'
                #all_es_pid_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                #all_es_pid_p_starting_cc_e_unc.append(data[DNN_name]['p_starting_cc_e_uncertainty'])
                #all_es_pid_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                #all_es_pid_p_starting_cc_mu_unc.append(data[DNN_name]['p_starting_cc_mu_uncertainty'])
                #all_es_pid_p_starting_cc_tau.append(data[DNN_name]['p_starting_cc_tau'])
                #all_es_pid_p_starting_cc_tau_unc.append(data[DNN_name]['p_starting_cc_tau_uncertainty'])
                
                #all_cscdl3_cont_tag.append(cscdl3_cont_tag)
                '''
                all_cscdSBU_Qtot_HLC.append(cscdSBU_Qtot_HLC)
                all_cscdSBU_MaxQtotRatio_HLC.append(cscdSBU_MaxQtotRatio_HLC)
                all_cscdSBU_VetoMaxDomChargeString.append(cscdSBU_VetoMaxDomChargeString)
                all_cscdSBU_VetoEarliestLayer.append(cscdSBU_VetoEarliestLayer)
                all_cscdSBU_I3XYScale.append(cscdSBU_I3XYScale)
                all_cscdSBU_DepthFirstHit.append(cscdSBU_DepthFirstHit)
                all_cscdSBU_distance_deepcore.append(cscdSBU_distance_deepcore)
                all_cscdSBU_distance_icecube.append(cscdSBU_distance_icecube)
                '''
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        #DNNMESE
        #all_DNNMESE_E = np.concatenate(all_DNNMESE_E) 
        #all_DNNMESE_zen= np.concatenate(all_DNNMESE_zen)
        #all_DNNMESE_azi= np.concatenate(all_DNNMESE_azi)
        #all_DNNMESE_x= np.concatenate(all_DNNMESE_x)
        #all_DNNMESE_y= np.concatenate(all_DNNMESE_y)
        #all_DNNMESE_z= np.concatenate(all_DNNMESE_z)
        #all_DNNMESE_zen_un= np.concatenate(all_DNNMESE_zen_un)
        #all_DNNMESE_azi_un= np.concatenate(all_DNNMESE_azi_un)
        #all_DNNMESE_x_un= np.concatenate(all_DNNMESE_x_un)
        #all_DNNMESE_y_un= np.concatenate(all_DNNMESE_y_un)
        #all_DNNMESE_z_un= np.concatenate(all_DNNMESE_z_un)
       
        #cgen
        #all_cgen_x = np.concatenate(all_cgen_x)
        #all_cgen_y = np.concatenate(all_cgen_y)
        #all_cgen_z = np.concatenate(all_cgen_z)
        #all_cgen_time = np.concatenate(all_cgen_time)
        #all_cgen_zen = np.concatenate(all_cgen_zen)
        #all_cgen_azi = np.concatenate(all_cgen_azi)
        #all_cgen_E = np.concatenate(all_cgen_E)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            #all_egen_circ_unc = np.concatenate(all_egen_circ_unc)
            
            #all_egen_marginalized_x = np.concatenate(all_egen_marginalized_x)
            #all_egen_marginalized_y = np.concatenate(all_egen_marginalized_y)
            #all_egen_marginalized_z = np.concatenate(all_egen_marginalized_z)
            #all_egen_marginalized_time = np.concatenate(all_egen_marginalized_time)
            #all_egen_marginalized_zen = np.concatenate(all_egen_marginalized_zen)
            #all_egen_marginalized_azi = np.concatenate(all_egen_marginalized_azi)
            #all_egen_marginalized_E = np.concatenate(all_egen_marginalized_E)
            #all_egen_marginalized_circ_unc = np.concatenate(all_egen_marginalized_circ_unc)
            '''        
            all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit) 
            ''' 
        #event selection
        #all_es_p_entering = np.concatenate(all_es_p_entering)
        #all_es_length = np.concatenate(all_es_length)
        #all_es_length_log_unc = np.concatenate(all_es_length_log_unc)
        #all_es_p_track = np.concatenate(all_es_p_track)
        #all_es_300m_p_starting_300m_01 = np.concatenate(all_es_300m_p_starting_300m_01)
        #all_es_300m_p_starting_300m_02 = np.concatenate(all_es_300m_p_starting_300m_02)
                
        #all_es_dnn_cscdl3b_starting_cascades_big_02 = np.concatenate( all_es_dnn_cscdl3b_starting_cascades_big_02) 
        #all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = np.concatenate(all_es_dnn_cscdl3b_starting_cascades_big_strict_02) 
        #all_es_dnn_cscdl3b_starting_events_02 = np.concatenate(all_es_dnn_cscdl3b_starting_events_02 )
        #all_es_cscdl2_300m_starting = np.concatenate(all_es_cscdl2_300m_starting)
        #all_es_cscdl2_0m_starting = np.concatenate(all_es_cscdl2_0m_starting)
        #all_es_cscdl3_02_starting = np.concatenate(all_es_cscdl3_02_starting)
        #all_es_03_starting = np.concatenate(all_es_03_starting)
        #all_es_cscdl2_big_starting = np.concatenate(all_es_cscdl2_big_starting)
        #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = np.concatenate( all_es_dnn_cscdl3a_starting_events_300m_red_fast_02) 
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        #all_es_p_starting_dnn_cscd_l3a_03 = np.concatenate(all_es_p_starting_dnn_cscd_l3a_03 )
        
        #all_es_p_starting_cscd_mp_starting_cascades_big_01 = np.concatenate(all_es_p_starting_cscd_mp_starting_cascades_big_01)
        #all_es_p_starting_cscd_mp_starting_events_big_02 = np.concatenate(all_es_p_starting_cscd_mp_starting_events_big_02)
        
        #all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_events_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)
        '''
        all_cscdSBU_Qtot_HLC=np.concatenate(all_cscdSBU_Qtot_HLC)
        all_cscdSBU_MaxQtotRatio_HLC=np.concatenate(all_cscdSBU_MaxQtotRatio_HLC)
        all_cscdSBU_VetoMaxDomChargeString=np.concatenate(all_cscdSBU_VetoMaxDomChargeString)
        all_cscdSBU_VetoEarliestLayer=np.concatenate(all_cscdSBU_VetoEarliestLayer)
        all_cscdSBU_I3XYScale=np.concatenate(all_cscdSBU_I3XYScale)
        all_cscdSBU_DepthFirstHit=np.concatenate(all_cscdSBU_DepthFirstHit)
        all_cscdSBU_distance_deepcore=np.concatenate(all_cscdSBU_distance_deepcore)
        all_cscdSBU_distance_icecube=np.concatenate(all_cscdSBU_distance_icecube)
        
        all_es_length_02 = np.concatenate(all_es_length_02)
        all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        '''
        #u'DNN_es_p_starting_300m_mp_big_02', u'es_03_starting',
        #u'es_cscdl2_big_starting', u'es_cscdl3_02_starting',
        #all_BDT_dnn_cscd_l3a_02_cascade_300m = np.concatenate(all_BDT_dnn_cscd_l3a_02_cascade_300m )
        #all_BDT_preselection_01 = np.concatenate(all_BDT_preselection_01) 
        #all_BDT_dnn_cscd_l3a_01_cascade_300m  = np.concatenate(all_BDT_dnn_cscd_l3a_01_cascade_300m)
        #all_BDT_dnn_cscd_l3a_01 = np.concatenate(all_BDT_dnn_cscd_l3a_01)


        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )


        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'DNNMESE_E' : all_DNNMESE_E, 'DNNMESE_zen' : all_DNNMESE_zen, 'DNNMESE_azi' : all_DNNMESE_azi, 'DNNMESE_x' :all_DNNMESE_x, 
            #'DNNMESE_y' : all_DNNMESE_y, 'DNNMESE_z' : all_DNNMESE_z, #'DNNMESE_E_Visable' : all_DNNMESE_EnergyVisable,
            #'DNNMESE_zen_unc' : all_DNNMESE_zen_un, 'DNNMESE_azi_unc' : all_DNNMESE_azi_un, 
            #'DNNMESE_x_unc' : all_DNNMESE_x_un, 'DNNMESE_y_unc' : all_DNNMESE_y_un,  'DNNMESE_z_unc' : all_DNNMESE_z_un, 
            #'cgen_x' : all_cgen_x, 'cgen_y' : all_cgen_y, 'cgen_z' : all_cgen_z, 'cgen_time' : all_cgen_time,
            #'cgen_zen' : all_cgen_zen, 'cgen_azi' : all_cgen_azi, 'cgen_E' :all_cgen_E ,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'BDT_dnn_cscd_l3a_02_cascade_300m' : all_BDT_dnn_cscd_l3a_02_cascade_300m,
            #'BDT_preselection_01' : all_BDT_preselection_01,
            #'BDT_dnn_cscd_l3a_01_cascade_300m' : all_BDT_dnn_cscd_l3a_01_cascade_300m,
            #'BDT_dnn_cscd_l3a_01' : all_BDT_dnn_cscd_l3a_01,
            #'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            #'dnn_cscd_l3c_track_in_detector_length_01' : all_es_dnn_cscd_l3c_track_in_detector_length_01,
            #'dnn_cscd_l3c_track_in_detector_length_01_unc' : all_es_dnn_cscd_l3c_track_in_detector_length_01_unc,
            #'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            #'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            #'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            #'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 
            #'cscdSBU_MaxQtotRatio_HLC' : all_cscdSBU_MaxQtotRatio_HLC,
            #'cscdSBU_VetoMaxDomChargeString' : all_cscdSBU_VetoMaxDomChargeString, 
            #'cscdSBU_VetoEarliestLayer' : all_cscdSBU_VetoEarliestLayer, 
            #'cscdSBU_I3XYScale' : all_cscdSBU_I3XYScale, 'cscdSBU_DepthFirstHit' : all_cscdSBU_DepthFirstHit,
            #'cscdSBU_distance_deepcore' : all_cscdSBU_distance_deepcore, 'cscdSBU_distance_icecube' : all_cscdSBU_distance_icecube,
            #'monopod_azi' : all_monopod_azi , 'monopod_zen' : all_monopod_zen, 'monopod_E' : all_monopod_E ,
            #'monopod_x' : all_monopod_x, 'monopod_y' : all_monopod_y, 'monopod_z' : all_monopod_z,
            
            #'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/IC86_2013/IC86_2013_genie_val.hdf5', 'data') 



@cli.command()
@click.option('--kind', default='nugen', type=str)
@click.option('--systematics', default=None, type=str)
def create_arrays_2cas(kind, systematics):
    all_Run=[] ; all_Event=[] ; all_trueE=[] ; all_logE=[] ; all_ow=[] ; all_trueDec=[] ; all_trueRa=[] ; all_ra=[]
    all_dec=[] ; all_sigma=[] ; all_type=[] ; all_interaction=[] ; all_trueTime=[]
    all_truelength = []
    all_mjd = []

    all_weight=[] ; all_weight_sibyll = [] ; all_weight_dpmjet=[] 
    all_DNNMESE_E=[] ; all_DNNMESE_zen=[] ; all_DNNMESE_azi=[] ; all_DNNMESE_x=[] ; all_DNNMESE_y=[] ; all_DNNMESE_z=[] ; all_DNNMESE_zen_un=[]
    all_DNNMESE_azi_un=[] ; all_DNNMESE_EnergyVisable=[] ; all_DNNMESE_EnergyVisable_un=[] ; all_DNNMESE_x_un=[] ; all_DNNMESE_y_un=[] ; all_DNNMESE_z_un=[] ;  
    all_DNNMESE_E_un=[] ;all_DNNMESE_zen_un=[]

    all_cgen_x=[] ;all_cgen_y=[]; all_cgen_z = [] ; all_cgen_time=[]; all_cgen_zen=[]; all_cgen_azi=[] ; all_cgen_E=[] 
    all_egen_x=[] ;all_egen_y=[]; all_egen_z = [] ; all_egen_time=[]; all_egen_zen=[]; all_egen_azi=[] ; all_egen_E=[] 
    all_egen_circ_unc = []
    all_egen_marginalized_x=[] ;all_egen_marginalized_y=[]; all_egen_marginalized_z = [] ; all_egen_marginalized_time=[]
    all_egen_marginalized_zen=[]; all_egen_marginalized_azi=[] ; all_egen_marginalized_E=[]; all_egen_marginalized_circ_unc = []
    all_es_300m_p_starting_300m_01=[] ; all_es_300m_p_starting_300m_02=[]
    all_es_p_starting_cscd_l3_big_02 = []
    
    all_es_p_entering=[] ; all_es_length_02 = []
    all_es_length_log_unc_02 = [] ;all_es_length = []
    all_es_length_log_unc = [] ; all_es_p_track=[]
    all_es_pid_p_starting_cc_e = [] ; all_es_pid_p_starting_cc_e_unc = [] ; all_es_pid_p_starting_cc_mu = []
    all_es_pid_p_starting_cc_mu_unc = [] ; all_es_pid_p_starting_cc_tau = [] ; all_es_pid_p_starting_cc_tau_unc = []

    all_DNNlabels_p_starting=[] ; all_DNNlabels_p_entering=[] ; all_DNNlabels_true_x=[] ; all_DNNlabels_true_y=[] ; all_DNNlabels_true_z=[] ;all_DNNlabels_true_VertexZ = []
    all_DNNlabels_true_VertexX=[] ; all_DNNlabels_true_VertexY = []            
    all_DNNlabels_true_azi=[] ; all_DNNlabels_true_zen = []            


    all_cscdSBU_Qtot_HLC=[] ; all_cscdSBU_Qtot_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_SplitInIcePulses=[] ; all_cscdSBU_MaxQtotRatio_HLC=[] ; all_cscdSBU_EarlyDOMs=[]
    all_cscdSBU_VetoMaxDomChargeString=[] ; all_cscdSBU_MonopodFIt4_delay_vac=[] ; all_cscdSBU_VetoMaxDomChargeOM=[] ; all_cscdSBU_VetoEarliestLayer=[]
    all_cscdSBU_I3XYScale=[] ; all_cscdSBU_DepthFirstHit=[] ; all_cscdSBU_PolygonContTag=[]
    all_cscdSBU_distance_deepcore = [] ; all_cscdSBU_distance_icecube = []
    all_cscdl3_cont_tag = []
    all_time = []
    all_track_rlogl=[]
                
    all_BDT_dnn_cscd_l3a_02_cascade_300m = [] ; all_BDT_preselection_01 = []
    all_BDT_dnn_cscd_l3a_01_cascade_300m = [] ;all_BDT_dnn_cscd_l3a_01 = []
    all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = []

    all_monopod_azi=[] ; all_monopod_zen=[] ; all_monopod_E =[] ;all_monopod_x=[]; all_monopod_y=[]; all_monopod_z=[]; all_monopod_time=[]

    all_es_cscdl2_300m_starting = [] ; all_es_cscdl2_0m_starting = [] ; all_es_cscdl2_0m_starting_un = [] ; all_es_cscdl3_02_starting = [] 
    all_es_cscdl3_02_starting_un = [] ; all_es_03_starting = [] ; all_es_03_un = [] ; all_es_cscdl2_big_starting = []
    all_es_cscdl2_big_starting_un = [] ; all_es_monopod_p_starting_300m_big_02=[]
    all_cscd_l3=[]        
    all_es_p_starting_dnn_cscd_l3a_03 = []; all_es_p_starting_cscd_mp_starting_cascades_big_01 = [];
    all_es_p_starting_cscd_mp_starting_events_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_02 = []
    all_es_dnn_cscdl3b_starting_cascades_big_strict_02 = []
    all_es_dnn_cscdl3b_starting_events_02 = []
    all_es_dnn_cscdl3a_starting_events_300m_red_fast_02 = []
    dataset_ids = []
    all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = [] ; all_es_dnn_cscdl3a_starting_events_150m_red_fast_02 = []


    all_azi_unc_cov = [] ; all_zen_unc_cov = [] ; all_circ_unc_cov = [] ; all_azi_unc_cov_fit = [] ; all_circ_unc_cov_sand = []
    all_zen_unc_cov_fit = [] ; all_circ_unc_cov_fit = [] ; all_azi_unc_cov_sand = [] ; all_zen_unc_cov_sand = []
    all_azi_unc_cov_sand_fit = [] ; all_zen_unc_cov_sand_fit = []  ; all_circ_unc_cov_sand_fit = []
    

    all_egenbest_x = [] ; all_egenbest_y = [] ; all_egenbest_z = [] ; all_egenbest_time = [] ; 
    all_egenbest_zen = [] ; all_egenbest_azi = [] ; all_egenbest_E = []

    all_egen2c_x = [] ; all_egen2c_y = [] ; all_egen2c_z = [] ; all_egen2c_time = [] ;
    all_egen2c_zen = [] ; all_egen2c_azi = []; all_egen2c_E = [] ; all_egen2c_loss_reco = []
    
    all_egen_loss_reco = [] ; all_egen2c_loss_reco = []
        
    all2c_circ_unc_cov = [] ; all2c_circ_unc_cov_fit = [] ;
    all2c_circ_unc_cov_sand = [] ; all2c_circ_unc_cov_sand_fit = [] ;
    allbest_circ_unc_cov_sand = []

    all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01 = []
    all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = []
    all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = []
    all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = []
    all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = []
    all_es_egen_vertex_track_in_detector_length = []
    all_es_egen_vertex_track_in_detector_length_unc = []
    all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = []
    all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = []

    all_BDT_final_starting_300m_01 = []
    all_event_selection_cascade_zenith = [] ; all_event_selection_cascade_azimuth = []; all_event_selection_cascade_energy = []; all_event_selection_cascade_time = []
    all_snowstorm_parameters = [] ; all_snowstorm_vectors = []                                              
    all_snowstorm_scattering = [] ; all_snowstorm_absorption = [] ; all_snowstorm_anisotropy_scale = []     
    all_snowstorm_DOM_efficiency = [] ;                                                                     
    all_snowstorm_holeice_forward_unified_00 = [] ; all_snowstorm_holeice_forward_unified_01 = []           
    all_mu_score = [] ; all_c_score = [] ; all_astro_score= []
    livetime = 0

    all_nn_sigma_nn_01 = []; all_nn_sigma_nn_02 = [] ; all_sigma_nn_ind2cascade = [] ; all_nn_astroness_nn_01 = []
    all_bdt_astroness_bdt_01 = [] ;   all_bdt_astroness_bdt_wo_energy_01 = [] ;   all_bdt_astroness_bdt_wo_energy_zenith = [] 
    all_bdt_astroness_bdt_wo_zenith_01 = []
    all_nn_veto = []
    all_nn_veto_with_E = []

    base_dir = '/data/user/mhuennefeld/test_DNN_reco/event_selection/processing/patchwork_01/step_02_i3_to_hdf5__loose_05/'
    #'/data/user/mhuennefeld/test_DNN_reco/event_selection/sigma_astroness/sigma_astroness_bdts_01/'
    if kind=='nugen':        
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']
        for flavor in flavors:
            if flavor == 'NuE':
                did = 21537 #21217
            elif flavor == 'NuMu':
                did = 21535 #21218
            elif flavor == 'NuTau':
                did = 21536 #21219
            
            print('Flavor: {}'.format(flavor))
            print('Dataset ID: {}'.format(did))
            
            filenames = glob.glob( base_dir + 'NuGen/{}/*.hdf5'.format(did))
            print(filenames)
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:]  
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]
                astro_score = f.root.BDT_astroness_bdt_without_ind_unc_02.cols.pred_000[:]                                    
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                
                bdt_astroness_bdt_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_zenith = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_zenith_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_zenith_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_zenith_01.cols.pred_000[:]
                nn_veto_with_E = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_with_energy_01.cols.p_is_veto_event[:]
                nn_veto = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_01.cols.p_is_veto_event[:]
                
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedRecoNN_I3Particle',
                    'EventGeneratorSelectedRecoNNCircularUncertainty',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'circ_unc', 'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        elif UNC_type == 'cascade_unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                ra = unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]

                #BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                

                #mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 
                #c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_000[:]
                
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)
                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                all_astro_score.append(astro_score)
                all_bdt_astroness_bdt_01.append(bdt_astroness_bdt_01)
                all_bdt_astroness_bdt_wo_energy_01.append(bdt_astroness_bdt_wo_energy_01)
                all_bdt_astroness_bdt_wo_energy_zenith.append(bdt_astroness_bdt_wo_energy_zenith)
                all_bdt_astroness_bdt_wo_zenith_01.append(bdt_astroness_bdt_wo_zenith_01)
                all_nn_veto.append(nn_veto)
                all_nn_veto_with_E.append(nn_veto_with_E)
                dataset_ids.append(dataset_id)
                
                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name = 'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])



                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)


    
                #all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)

        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)
        all_astro_score = np.concatenate(all_astro_score)
        all_bdt_astroness_bdt_01 = np.concatenate(all_bdt_astroness_bdt_01)
        all_bdt_astroness_bdt_wo_energy_01 = np.concatenate(all_bdt_astroness_bdt_wo_energy_01)
        all_bdt_astroness_bdt_wo_energy_zenith = np.concatenate(all_bdt_astroness_bdt_wo_energy_zenith)
        all_bdt_astroness_bdt_wo_zenith_01 = np.concatenate(all_bdt_astroness_bdt_wo_zenith_01)
        all_nn_veto = np.concatenate(all_nn_veto)
        all_nn_veto_with_E = np.concatenate(all_nn_veto_with_E)
        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )


        #all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
        #all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
        all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
        #all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
        #all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
        all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
        #all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
        #all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
        all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
        #all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
        #all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
        all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit)

        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        


        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_cscdl3_cont_tag = np.concatenate(all_cscdl3_cont_tag)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        print('concatenating new stuff?')
        #all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'mu_score' : all_mu_score, 'c_score' : all_c_score, 'astro_score' : all_astro_score,
            'astro_bdt_01' : all_bdt_astroness_bdt_01, 'astro_bdt_wo_energy_01'  : all_bdt_astroness_bdt_wo_energy_01,
            'astro_bdt_wo_energy_zenith_01' : all_bdt_astroness_bdt_wo_energy_zenith,
            'astro_bdt_wo_zenith_01' : all_bdt_astroness_bdt_wo_zenith_01,
            'nn_veto' :  all_nn_veto, 'nn_veto_w_E' : all_nn_veto_with_E, 
            'dataset_id' : dataset_ids, 
            'sigma' : allbest_circ_unc_cov_sand, #'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            #'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            #'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            #'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            #'circ_unc_cov_2c' :  all2c_circ_unc_cov, 'circ_unc_cov_fit_2c' : all2c_circ_unc_cov_fit,
            #'circ_unc_cov_sand_2c' : all2c_circ_unc_cov_sand, #'circ_unc_cov_sand_fit_2c' : all2c_circ_unc_cov_sand_fit,
            #'circ_unc_cov_sand_best' : allbest_circ_unc_cov_sand,
            #'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            #'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 
            #'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            #'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            #'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            #'circ_unc_sand' : all_circ_unc_cov_sand,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        df.to_hdf('/data/user/ssclafani/data/cscd/final/nugen_loose_train_bfrv1.hdf5', 'data') 
    elif kind=='nugen_snowstorm':        
        base_dir = '/data/user/mhuennefeld/test_DNN_reco/event_selection/processing/patchwork_01/step_02_i3_to_hdf5__06/'
        print('Building dataframe for training BDT...')
        flavors=['NuE', 'NuMu', 'NuTau']

        dids = [21430, 21431, 21432, 21468, 21469, 21470, 21471, 21472, 21473]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob(base_dir + 'NuGen/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]
                astro_score = f.root.BDT_astroness_bdt_without_ind_unc_02.cols.pred_000[:]
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                snowstorm_index = f.root.SnowstormParameters.cols.vector_index[:]  
                snowstorm_vector = f.root.SnowstormParameters.cols.item[:]  
                
                df_dict = {}

                parameter_names=[
                'Scattering', 'Absorption', 'AnisotropyScale', 
                'DOMEfficiency', 'HoleIceForward_Unified_00', 
                'HoleIceForward_Unified_01',]
                for index in np.unique(snowstorm_index):
                    mask = (snowstorm_index == index)
                    df_dict[parameter_names[index]]  = snowstorm_vector[mask]


                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedRecoNN_I3Particle',
                    'EventGeneratorSelectedRecoNNCircularUncertainty'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        elif UNC_type == 'cascade_unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                ra = unc['EventGeneratorSelectedRecoNN_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedRecoNN_I3Particle']['zenith'] - np.pi/2.
                
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                trueRa = a
                trueDec = z-np.pi/2.
                
                #nn_sigma_nn_01 = f.root.NN_sigma_nn_01.cols.pred_000[:]
                #nn_sigma_nn_02 = f.root.NN_sigma_nn_02.cols.pred_000[:]
                #nn_astroness_nn_01 = f.root.NN_astroness_nn_01.cols.pred_000[:]
                #bdt_astroness_bdt_01 = f.root.BDT_astroness_bdt_01.cols.pred_000[:]
                #bdt_astroness_bdt_02 = f.root.BDT_astroness_bdt_02.cols.pred_000[:]
                #bdt_astroness_bdt_03 = f.root.BDT_astroness_bdt_03.cols.pred_000[:]
                
                
                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]

               # BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)

                all_dec.append(dec)
                all_ra.append(ra)
                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                all_astro_score.append(astro_score)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                dataset_ids.append(dataset_id)

                all_snowstorm_scattering.append (df_dict['Scattering'])
                all_snowstorm_absorption.append(df_dict['Absorption'])
                all_snowstorm_anisotropy_scale.append( df_dict['AnisotropyScale'])
                all_snowstorm_DOM_efficiency.append( df_dict['DOMEfficiency'])
                all_snowstorm_holeice_forward_unified_00.append( df_dict['HoleIceForward_Unified_00'])
                all_snowstorm_holeice_forward_unified_01.append(df_dict['HoleIceForward_Unified_01'])

                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedRecoNN_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name =  'EventGeneratorSelectedRecoNNCircularUncertainty'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                #all_nn_sigma_nn_01.append(nn_sigma_nn_01)
                #all_nn_sigma_nn_02.append(nn_sigma_nn_02)
                #all_nn_astroness_nn_01.append(nn_astroness_nn_01)
                #all_bdt_astroness_bdt_01.append(bdt_astroness_bdt_01)
                #all_bdt_astroness_bdt_02.append(bdt_astroness_bdt_02)
                #all_bdt_astroness_bdt_03.append(bdt_astroness_bdt_03)
                

    
                #all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)
        all_astro_score = np.concatenate(all_astro_score)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)


        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        all_snowstorm_scattering = np.concatenate( all_snowstorm_scattering)
        all_snowstorm_absorption = np.concatenate( all_snowstorm_absorption)
        all_snowstorm_anisotropy_scale = np.concatenate(all_snowstorm_anisotropy_scale)
        all_snowstorm_DOM_efficiency = np.concatenate(all_snowstorm_DOM_efficiency)
        all_snowstorm_holeice_forward_unified_00 = np.concatenate( all_snowstorm_holeice_forward_unified_00)
        all_snowstorm_holeice_forward_unified_01 = np.concatenate( all_snowstorm_holeice_forward_unified_01)
        
        dataset_ids = np.concatenate(dataset_ids)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )


            #all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            #all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            #all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            #all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            #all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            #all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            #all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            #all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit)


 
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        

        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ =np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        #all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )
                
        #all_nn_sigma_nn_01 = np.concatenate(all_nn_sigma_nn_01)
        #all_nn_sigma_nn_02 = np.concatenate(all_nn_sigma_nn_02)
        #all_nn_astroness_nn_01 = np.concatenate(all_nn_astroness_nn_01)
        #all_bdt_astroness_bdt_01 = np.concatenate(all_bdt_astroness_bdt_01)
        #all_bdt_astroness_bdt_02 = np.concatenate(all_bdt_astroness_bdt_02)
        #all_bdt_astroness_bdt_03 = np.concatenate(all_bdt_astroness_bdt_03)

        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'snowstorm_Scattering' : all_snowstorm_scattering,
            'snowstorm_Absorption' : all_snowstorm_absorption,
            'snowstorm_AnisotropyScale' : all_snowstorm_anisotropy_scale,
            'snowstorm_DOMEfficiency' : all_snowstorm_DOM_efficiency,
            'snowstorm_HoleIceForward_Unified_00' : all_snowstorm_holeice_forward_unified_00,
            'snowstorm_HoleIceForward_Unified_01' : all_snowstorm_holeice_forward_unified_01,
            'mu_score' : all_mu_score, 'c_score' : all_c_score, 'astro_score' : all_astro_score,
            #'old_sigma' :all_sigma,
            #'sigma_nn_01' : all_nn_sigma_nn_01, 'sigma_nn_02' : all_nn_sigma_nn_02,
            #'astro_nn_01' : all_nn_astroness_nn_01, 'astro_bdt_01' : all_bdt_astroness_bdt_01,
            #'astro_bdt_02' : all_bdt_astroness_bdt_02 , 'astro_bdt_03' : all_bdt_astroness_bdt_03,

            'dataset_id' : dataset_ids, 
            'sigma' : allbest_circ_unc_cov_sand, #'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            #'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            #'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            #'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            #'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            #'circ_unc_cov_2c' :  all2c_circ_unc_cov, 'circ_unc_cov_fit_2c' : all2c_circ_unc_cov_fit,
            #'circ_unc_cov_sand_2c' : all2c_circ_unc_cov_sand, #'circ_unc_cov_sand_fit_2c' : all2c_circ_unc_cov_sand_fit,
            #'circ_unc_cov_sand_best' : allbest_circ_unc_cov_sand,
            #'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            #'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 
            'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            #'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('sens nugen snowstorm')
        df.to_hdf('/data/user/ssclafani/data/cscd/final/nugen_snowstorm_astro_sigma.hdf5', 'data') 
    elif kind=='data':        
        # base_dir = '/data/user/mhuennefeld/test_DNN_reco/event_selection/processing/patchwork_01/step_02_i3_to_hdf5__06/'
        #base_dir = '/data/user/mhuennefeld/test_DNN_reco/event_selection/processing/patchwork_01/step_02_i3_to_hdf5__loose_03/'
        years = [2011,2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 ]
        for year in years:
            print('year: {}'.format(year))
            filenames = glob.glob(base_dir + 'exp/{}/*.hdf5'.format(year))
            print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                print('total runs: {}'.format(len(np.unique(f.root.I3EventHeader.cols.Run[:]))))

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]
                astro_score = f.root.BDT_astroness_bdt_without_ind_unc_02.cols.pred_000[:]
                bdt_astroness_bdt_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_zenith = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_zenith_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_zenith_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_zenith_01.cols.pred_000[:]
                nn_veto_with_E = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_with_energy_01.cols.p_is_veto_event[:]
                
                nn_veto = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_01.cols.p_is_veto_event[:]
                
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                mjd = f.root.I3EventHeader.cols.time_start_mjd[:]                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                #BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                livetime += f.root.ExpLivetime_livetime.cols.value[0] 
                print(livetime)
                #nn_sigma_nn_1cas = f.root.NN_sigma_nn_1cascade_05_test.cols.pred_000[:]
                #nn_sigma_nn_2cas = f.root.NN_sigma_nn_2cascade_05_test.cols.pred_000[:]
                #nn_astroness_nn_01 = f.root.NN_astroness_nn_01.cols.pred_000[:]
                #bdt_astroness_bdt_01 = f.root.BDT_astroness_bdt_01.cols.pred_000[:]
                #bdt_astroness_bdt_02 = f.root.BDT_astroness_bdt_02.cols.pred_000[:]
                #bdt_astroness_bdt_03 = f.root.BDT_astroness_bdt_03.cols.pred_000[:]
                
                
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedRecoNN_I3Particle',
                    'EventGeneratorSelectedRecoNNCircularUncertainty',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'circ_unc', 'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        elif UNC_type == 'cascade_unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                ra = unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['zenith'] - np.pi/2.
                all_Run.append(Run)
                all_Event.append(Event)
                all_mjd.append(mjd)
                all_dec.append(dec)
                all_ra.append(ra)
                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                all_astro_score.append(astro_score)
                #all_sigma.append(sigma)
                all_nn_veto.append(nn_veto)

                #all_cscd_l3.append(cscd_l3)
                all_bdt_astroness_bdt_01.append(bdt_astroness_bdt_01)
                all_bdt_astroness_bdt_wo_energy_01.append(bdt_astroness_bdt_wo_energy_01)
                all_bdt_astroness_bdt_wo_energy_zenith.append(bdt_astroness_bdt_wo_energy_zenith)
                all_bdt_astroness_bdt_wo_zenith_01.append(bdt_astroness_bdt_wo_zenith_01)
                all_nn_veto_with_E.append(nn_veto_with_E)

                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                
                #all_nn_sigma_nn_01.append(nn_sigma_nn_01)
                #all_nn_sigma_nn_02.append(nn_sigma_nn_02)
                #all_nn_astroness_nn_01.append(nn_astroness_nn_01)
                #all_bdt_astroness_bdt_01.append(bdt_astroness_bdt_01)
                #all_bdt_astroness_bdt_02.append(bdt_astroness_bdt_02)
                #all_bdt_astroness_bdt_03.append(bdt_astroness_bdt_03)
                
                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name = 'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])

                #all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_mjd=np.concatenate(all_mjd)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)
        all_astro_score = np.concatenate(all_astro_score)
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )


            #all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            #all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            #all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            #all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            #all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            #all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            #all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            #all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit)
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        
        all_bdt_astroness_bdt_01 = np.concatenate(all_bdt_astroness_bdt_01)
        all_bdt_astroness_bdt_wo_energy_01 = np.concatenate(all_bdt_astroness_bdt_wo_energy_01)
        all_bdt_astroness_bdt_wo_energy_zenith = np.concatenate(all_bdt_astroness_bdt_wo_energy_zenith)
        all_bdt_astroness_bdt_wo_zenith_01 = np.concatenate(all_bdt_astroness_bdt_wo_zenith_01)
        all_nn_veto_with_E = np.concatenate(all_nn_veto_with_E)
        all_nn_veto = np.concatenate(all_nn_veto)

        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        #all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )
        
        #all_nn_sigma_nn_01 = np.concatenate(all_nn_sigma_nn_01)
        #all_nn_sigma_nn_02 = np.concatenate(all_nn_sigma_nn_02)
        #all_nn_astroness_nn_01 = np.concatenate(all_nn_astroness_nn_01)
        #all_bdt_astroness_bdt_01 = np.concatenate(all_bdt_astroness_bdt_01)
        #all_bdt_astroness_bdt_02 = np.concatenate(all_bdt_astroness_bdt_02)
        #all_bdt_astroness_bdt_03 = np.concatenate(all_bdt_astroness_bdt_03)
        print('Livetime: {}'.format(livetime / 86400.))
        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'MJD' : all_mjd, 
            'ra': all_ra, 'dec' :all_dec, 
            'mu_score' : all_mu_score, 'c_score' : all_c_score, 'astro_score' : all_astro_score,
            'livetime_mjd' : np.ones_like(all_Run) * ( livetime / 86400.), 
            'astro_bdt_01' : all_bdt_astroness_bdt_01, 'astro_bdt_wo_energy_01'  : all_bdt_astroness_bdt_wo_energy_01,
            'astro_bdt_wo_energy_zenith_01' : all_bdt_astroness_bdt_wo_energy_zenith,
            'astro_bdt_wo_zenith_01' : all_bdt_astroness_bdt_wo_zenith_01,
            'nn_veto' :  all_nn_veto, 'nn_veto_w_E' : all_nn_veto_with_E, 
            #'old_sigma' :all_sigma,
            #'sigma_nn_01' : all_nn_sigma_nn_01, 'sigma_nn_02' : all_nn_sigma_nn_02,
            #'astro_nn_01' : all_nn_astroness_nn_01, 'astro_bdt_01' : all_bdt_astroness_bdt_01,
            #'astro_bdt_02' : all_bdt_astroness_bdt_02 , 'astro_bdt_03' : all_bdt_astroness_bdt_03,

            'sigma' : allbest_circ_unc_cov_sand, # 'cscdl3' : all_cscd_l3,
            #'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            #'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            #'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            #'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            #'circ_unc_cov_2c' :  all2c_circ_unc_cov, 'circ_unc_cov_fit_2c' : all2c_circ_unc_cov_fit,
            #'circ_unc_cov_sand_2c' : all2c_circ_unc_cov_sand, #'circ_unc_cov_sand_fit_2c' : all2c_circ_unc_cov_sand_fit,
            #'circ_unc_cov_sand_best' : allbest_circ_unc_cov_sand,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            #'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            #'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            #'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            #'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            #'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 
            'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time}
            #'DNN_es_dnn_cscd_l3a_03_p_starting' : all_es_p_starting_dnn_cscd_l3a_03,
            #'DNN_es_cscd_mp_starting_cascades_big_01' : all_es_p_starting_cscd_mp_starting_cascades_big_01,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_p_starting_cscd_mp_starting_events_big_02,
            #'es_cscdl2_300m_starting' : all_es_cscdl2_300m_starting, 'es_cscdl2_0m_starting' : all_es_cscdl2_0m_starting,
            #'es_cscdl3_02_starting' : all_es_cscdl3_02_starting,  'es_03_starting' : all_es_03_starting,
            #'es_cscdl2_big_starting' : all_es_cscdl2_big_starting}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/final/data_loose_train_{}_{}.hdf5'.format(years[0], years[-1]), 'data') 
    elif kind=='muongun':        
        print('Building dataframe for training BDT...')
        dids = [21315, 21316, 21317, 21318, 21319]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob(base_dir + 'MuonGun/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            #print(filenames)
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            #print('total n_files: {}'.format(total_n_files))
            for filename in sorted(filenames):
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   
    
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]

                dataset_id = np.ones(len(z))*did
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:]  
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]
                astro_score = f.root.BDT_astroness_bdt_without_ind_unc_02.cols.pred_000[:]                                    
                nn_veto = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_01.cols.p_is_veto_event[:]
                bdt_astroness_bdt_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_energy_zenith = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_energy_zenith_01.cols.pred_000[:]
                bdt_astroness_bdt_wo_zenith_01 = f.root.BDT_astroness_bdt_mu0100_cscd0000_wo_zenith_01.cols.pred_000[:]
                nn_veto_with_E = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_with_energy_01.cols.p_is_veto_event[:]
                nn_veto = f.root.DeepLearningReco_event_selection_veto_classifier_vertex_early_01.cols.p_is_veto_event[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])

                n_events_per_run = np.unique(f.root.weights_meta_info.cols.n_events_per_run[:])
            
                if np.greater(len(nfiles), 1):
                    print('Check n-files.  All events should have the same n_files')
                
                print ('{} nfiles={} total_nfiles = {}'.format(filename,  nfiles, total_n_files))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
            
                weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files
                #weight_SIBYLL=f.root.weights.cols.GaisserH4a_atmod12_SIBYLL[:] * (nfiles) / total_n_files
                #weight_DPMJET=f.root.weights.cols.GaisserH4a_atmod12_DPMJET_C[:] * (nfiles) / total_n_files
                

                weight=weight_SIBYLL + weight_DPMJET
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedRecoNN_I3Particle',
                    'EventGeneratorSelectedRecoNNCircularUncertainty',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle',
                    'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'circ_unc', 'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        elif UNC_type == 'cascade_unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                ra = unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle']['zenith'] - np.pi/2.
                
                #BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                trueRa = a
                trueDec = z-np.pi/2.

                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                #all_sigma.append(sigma)
                all_weight_sibyll.append(weight_SIBYLL)
                all_weight_dpmjet.append(weight_DPMJET)
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)

                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                all_astro_score.append(astro_score)
                all_bdt_astroness_bdt_01.append(bdt_astroness_bdt_01)
                all_bdt_astroness_bdt_wo_energy_01.append(bdt_astroness_bdt_wo_energy_01)
                all_bdt_astroness_bdt_wo_energy_zenith.append(bdt_astroness_bdt_wo_energy_zenith)
                all_bdt_astroness_bdt_wo_zenith_01.append(bdt_astroness_bdt_wo_zenith_01)
                all_nn_veto.append(nn_veto)
                all_nn_veto_with_E.append(nn_veto_with_E)
                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_150m_red_fast_02.append(data[DNN_name]['p_starting'])

                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02'
                #all_es_dnn_cscdl3a_starting_events_300m_red_fast_02.append(data[DNN_name]['p_starting_300m'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedRecoNN_mu0100_cscd0000_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name = 'EventGeneratorSelectedRecoNN_mu0100_cscd0000CircularUncertainty'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])

                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)
                

                #all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)


        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        all_weight_sibyll=np.concatenate(all_weight_sibyll)
        all_weight_dpmjet=np.concatenate(all_weight_dpmjet)

        dataset_ids = np.concatenate(dataset_ids)
        all_truelength = np.concatenate(all_truelength)

        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)
        all_astro_score = np.concatenate(all_astro_score)
        all_bdt_astroness_bdt_01 = np.concatenate(all_bdt_astroness_bdt_01)
        all_bdt_astroness_bdt_wo_energy_01 = np.concatenate(all_bdt_astroness_bdt_wo_energy_01)
        all_bdt_astroness_bdt_wo_energy_zenith = np.concatenate(all_bdt_astroness_bdt_wo_energy_zenith)
        all_bdt_astroness_bdt_wo_zenith_01 = np.concatenate(all_bdt_astroness_bdt_wo_zenith_01)
        all_nn_veto = np.concatenate(all_nn_veto)
        all_nn_veto_with_E = np.concatenate(all_nn_veto_with_E)

        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )

        

        all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
        all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
        all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
        all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit)
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        
        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01 = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01)
        #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc = np.concatenate(all_es_dnn_cscd_l3c_track_in_detector_length_01_unc)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        #all_es_egen_vertex_track_in_detector_length = np.concatenate(all_es_egen_vertex_track_in_detector_length)
        #all_es_egen_vertex_track_in_detector_length_unc = np.concatenate(all_es_egen_vertex_track_in_detector_length_unc)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                
        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )
        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength': all_truelength, 'weight' : all_weight,
            'mu_score' : all_mu_score, 'c_score' : all_c_score, 'astro_score' : all_astro_score,
            'astro_bdt_01' : all_bdt_astroness_bdt_01, 'astro_bdt_wo_energy_01'  : all_bdt_astroness_bdt_wo_energy_01,
            'astro_bdt_wo_energy_zenith_01' : all_bdt_astroness_bdt_wo_energy_zenith,
            'astro_bdt_wo_zenith_01' : all_bdt_astroness_bdt_wo_zenith_01,
            'nn_veto' :  all_nn_veto, 'nn_veto_w_E' : all_nn_veto_with_E, 
            'dataset_id' : dataset_ids, 
            'sigma' : allbest_circ_unc_cov_sand, #'cscdl3' : all_cscd_l3,
            #'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            #'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            #'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            #'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}


        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/final/muongun_loose.hdf5', 'data') 
        print('Saving...')
    elif kind=='corsika':        
        print('Building dataframe for training BDT...')
        dids = [11057, 20904]
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob(base_dir + 'Corsika/{}/*.hdf5'.format(did))
            if len(filenames) == 0:
                print('NO FILES FOUND!!')
            total_n_files = 0
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                total_n_files +=nfiles
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE = f.root.LabelsDeepLearning.cols.PrimaryEnergy[:]
                    #trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                print(nfiles, total_n_files)
                weight = f.root.weights.cols.GaisserH4aWeight[:] #/ (nfiles)
                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]
                dataset_id = np.ones(len(Run))*did
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                #cscd_l3 = f.root.CscdL3.cols.value[:]
        

                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedReco_I3Particle',
                    'EventGeneratorSelectedReco_cov_matrix_cov_sand_circular_unc'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'cascade_unc', 'cascade_unc', 'cascade_unc', 'cascade_unc',
                        'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['azimuth_azimuth', 'zenith_zenith']
                        elif UNC_type == 'cascade_unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                ra = unc['EventGeneratorSelectedReco_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedReco_I3Particle']['zenith'] - np.pi/2.
                
                #BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]
                

                trueRa = a
                trueDec = z-np.pi/2.
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)
                all_weight.append(weight)
                all_dec.append(dec)
                all_ra.append(ra)
                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                
                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                #all_sigma.append(sigma)
                #all_weight_sibyll.append(weight_SIBYLL)
                #all_weight_dpmjet.append(weight_DPMJET)
        
                #all_cscd_l3.append(cscd_l3)
                all_truelength.append(truelength)
                all_type.append(particle_type)

                dataset_ids.append(dataset_id)

                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedReco_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name = 'EventGeneratorSelectedReco_cov_matrix_cov_sand_circular_unc'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01'
                #all_es_dnn_cscd_l3c_track_in_detector_length_01.append(data[DNN_name]['LengthInDetector'])
                #all_es_dnn_cscd_l3c_track_in_detector_length_01_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                #DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01'
                #all_es_egen_vertex_track_in_detector_length.append(data[DNN_name]['LengthInDetector'])
                #all_es_egen_vertex_track_in_detector_length_unc.append(data[DNN_name]['LengthInDetector_uncertainty'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])


                #all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

        print('concatenating')

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_weight=np.concatenate(all_weight)
        all_dec=np.concatenate(all_dec)
        all_ra=np.concatenate(all_ra)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        #all_sigma=np.concatenate(all_sigma)
        #all_weight_sibyll=np.concatenate(all_weight_sibyll)
        #all_weight_dpmjet=np.concatenate(all_weight_dpmjet)
        #all_cscd_l3 = np.concatenate(all_cscd_l3)
        all_truelength = np.concatenate(all_truelength)
        dataset_ids = np.concatenate(dataset_ids)
        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)

       
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        
        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
        #all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )

        print('Making DataFrame...')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 'trueDec' : all_trueDec, 
            'true_tracklength': all_truelength,
            'mu_score' : all_mu_score, 'c_score' : all_c_score,
            #'cscdl3' : all_cscd_l3,     
            'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            'sigma' : all_circ_unc_cov_sand, #'cscdl3' : all_cscd_l3,
            #'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            'circ_unc_cov_2c' :  all2c_circ_unc_cov, 'circ_unc_cov_fit_2c' : all2c_circ_unc_cov_fit,
            'circ_unc_cov_sand_2c' : all2c_circ_unc_cov_sand, #'circ_unc_cov_sand_fit_2c' : all2c_circ_unc_cov_sand_fit,
            'circ_unc_cov_sand_best' : allbest_circ_unc_cov_sand,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            #'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 
            'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            'circ_unc_sand' : all_circ_unc_cov_sand,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}
            #'cscdSBU_Qtot_HLC' : all_cscdSBU_Qtot_HLC, #'cscdSBU_Qtot_SplitInIcePulses' : all_cscdSBU_Qtot_SplitInIcePulses, 

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
        print('saving ...')
        
        df.to_hdf('/data/user/ssclafani/data/cscd/final/corsika_astro_sigma.hdf5', 'data') 
    elif kind=='genie':        
        print('Building dataframe for training BDT...')

        dids = [12463, 12475] 
        for did in dids:
            print('Dataset ID: {}'.format(did))
            filenames = glob.glob('/data/user/mhuennefeld/test_DNN_reco/event_selection/bdt_training/val_data_filtered_04__2cascade/GENIE/{}/*.hdf5'.format(did))
            total_ngen = 0 
            total_n_files = 0 
            for filename in filenames:
                f = tables.open_file (filename)
                nfiles = np.unique(f.root.weights_meta_info.cols.n_files[:])[0]
                ngen = nfiles * f.root.weights_meta_info.cols.n_events_per_run[:][0]
                total_n_files += nfiles
                total_ngen += ngen
            print('total n_files: {}'.format(total_n_files))
            for filename in filenames:
                f = tables.open_file (filename)
                trueE=f.root.MCPrimary.cols.energy[:]
                truelength = f.root.LabelsDeepLearning.cols.LengthInDetector[:]   

 
                z=f.root.MCPrimary.cols.zenith[:]
                a=f.root.MCPrimary.cols.azimuth[:]  
                particle_type=f.root.MCPrimary.cols.pdg_encoding[:]
                
                BDT_final_starting_300m_01 = f.root.BDT_final_starting_300m_01.cols.pred_000[:]
                event_selection_cascade_zenith = f.root.event_selection_cascade.cols.zenith[:]
                event_selection_cascade_azimuth = f.root.event_selection_cascade.cols.azimuth[:]
                event_selection_cascade_energy = f.root.event_selection_cascade.cols.energy[:]
                event_selection_cascade_time = f.root.event_selection_cascade.cols.time[:]

                DNNlabels_true_VertexZ = f.root.LabelsDeepLearning.cols.VertexZ[:]
                DNNlabels_true_VertexY = f.root.LabelsDeepLearning.cols.VertexY[:]
                DNNlabels_true_VertexX = f.root.LabelsDeepLearning.cols.VertexX[:]
                DNNlabels_true_azi=f.root.LabelsDeepLearning.cols.PrimaryAzimuth[:]
                DNNlabels_true_zen=f.root.LabelsDeepLearning.cols.PrimaryZenith[:]

                #cscdl3_cont_tag = f.root.CscdL3_Cont_Tag.cols.value[:]
                
                dataset_id = np.ones(len(z))*did
                
                nfiles = f.root.weights_meta_info.cols.n_files[:][0]
                nevents = f.root.weights_meta_info.cols.n_events_per_run[:][0]
                print(nfiles, nevents)
                ngen = nevents * total_n_files
                print ('{} nfiles={}'.format(filename,  nfiles))
                Event=f.root.I3EventHeader.cols.Event[:]
                Run=f.root.I3EventHeader.cols.Run[:]
                ow=f.root.I3MCWeightDict.cols.OneWeight[:]
                dataset_id = np.ones(len(Run))*did
                mu_score = f.root.BDT_bdt_max_depth_4_n_est_2000lr_0_02_seed_3_train_size_50.cols.pred_001[:] 
                c_score = f.root['BDT_bdt_max_depth_4_n_est_1000lr_0.01_seed_3_train_size_50'].cols.pred_001[:]
                
                #cscd_l3 = f.root.CscdL3.cols.value[:]
                ow/=ngen
                DNN_names = [#'DeepLearningReco_mese_v2__all_gl_both2', 
                            #'DeepLearningReco_event_selection_cscdl3_300m_01', 
                            #'DeepLearningReco_dnn_export_cscdID', 
                            #'DeepLearningReco_event_selection_03', 
                            #'DeepLearningReco_event_selection_cscdl3_02',
                            #'DeepLearningReco_event_selection_cscdl3_big_03',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_03',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_events_big_kernel_02',
                            #'DeepLearningReco_event_selection_cascade_monopod_starting_cascades_big_kernel_01',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_cascades_big_kernel_strict_02', 
                            #'DeepLearningReco_event_selection_dnn_cscd_l3b_starting_events_02', 
                            

                            'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02',
                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_150m_red_summary_stats_fast_02',

                            #'DeepLearningReco_event_selection_dnn_cscd_l3a_starting_events_300m_red_summary_stats_fast_02',
                            'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01',
                            #'DeepLearningReco_event_selection_track_length_02',
                            
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_dnn_cscd_l3c_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01',# [p_starting_cc_mu]
                            'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01',# [p_starting_300m]
                            'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01',# [p_starting_300m]
                            #'DeepLearningReco_event_selection_egen_vertex_track_in_detector_length_01',# [LengthInDetector, LengthInDetector_uncertainty ]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01',# [p_starting_cc_e]
                            'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'# [p_starting_cc_mu]
                            ]


                DNN_types = [#'dir', 'starting_300m', 'is_track', 
                            #'starting', 'starting', 
                            #'starting', 'starting_300m',  
                            #'starting_300m', 'starting_cascade_L25_D300',
                            #'starting_cascade_L100_D300','starting_cascade_L100_D300','starting_300m',

                            'starting_cascade_L100_D150',
                            #'starting',

                            #'starting_300m',
                            'starting_300m',
                            #'length',
                            'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu',
                            'starting_300m', 'starting_300m', #'lengthindetector', 
                            'starting_cc_e', 'starting_cc_mu'
                            ]

                data = {}
                for index, DNN_name in enumerate(DNN_names):
                    #print( DNN_name)
                    DNN_type= DNN_types[index]
                    DNN={}

                    if DNN_type == 'dir':
                        keys = ['PrimaryZenith', 'PrimaryAzimuth', 'PrimaryEnergy', 'PrimaryDirectionX', 'PrimaryDirectionY', 'PrimaryDirectionZ',
                                'PrimaryZenith_uncertainty', 'PrimaryAzimuth_uncertainty', 'PrimaryDirectionX_uncertainty', 'PrimaryDirectionY_uncertainty', 
                                'PrimaryDirectionZ_uncertainty',  'EnergyVisible', 'EnergyVisible_log_uncertainty']
                    elif DNN_type == 'pid':
                        keys = ['p_starting', 'p_entering', 'p_is_track', 'p_outside_cascade', 'p_starting_300m', 'Length', 'LengthInDetector'] 
                    elif DNN_type == 'pid2':
                        keys = ['p_starting_cc_e', 'p_starting_cc_e_uncertainty', 'p_starting_cc_mu', 'p_starting_cc_mu_uncertainty',
                                'p_starting_cc_tau', 'p_starting_cc_tau_uncertainty']
                    elif DNN_type == 'entering':
                        keys = ['p_entering']
                    elif DNN_type == 'starting_300m':
                        keys = ['p_starting_300m']
                    elif DNN_type == 'starting_cascade_L25_D300':
                        keys = ['p_starting_cascade_L25_D300']
                    elif DNN_type == 'starting_cascade_L100_D300':
                        keys = ['p_starting_cascade_L100_D300']
                    elif DNN_type == 'starting_cascade_L100_D150':
                        keys = ['p_starting_cascade_L100_D150']
                    elif DNN_type == 'starting':
                        keys = ['p_starting']
                    elif DNN_type == 'starting_no_un':
                        keys = ['p_starting']
                    elif DNN_type == 'is_track':
                        keys = ['p_is_track']
                    elif DNN_type == 'length':
                        keys = ['Length', 'Length_log_uncertainty']
                    elif DNN_type == 'lengthindetector':
                        keys = ['LengthInDetector', 'LengthInDetector_uncertainty']
                    elif DNN_type == 'starting_cc_e':
                        keys = ['p_starting_cc_e']
                    elif DNN_type == 'starting_cc_mu':
                        keys = ['p_starting_cc_mu']
                    elif DNN_type == 'cgen':
                        keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                    for key in keys:
                        DNN[key] = f.root._f_get_child(DNN_name).cols._f_col(key)[:]
                    data[DNN_name] = DNN
                unc = {}
                egen= True 
                if egen == True:
                    UNC_names = [
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand', 
                    'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit',
                    
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand',
                    'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand_fit',
                    'EventGeneratorSelectedReco_I3Particle',
                    'EventGeneratorSelectedReco_cov_matrix_cov_sand_circular_unc'

                    ]

                    UNC_types = [ 'Egen_nounc', 'egen_loss_reco', 
                        'unc', 'unc', 'unc', 'unc',
                        'Egen_nounc', 'egen_loss_reco',
                        'unc', 'unc', 'unc', 'unc',
                        'Egen_nounc', 'circ_unc'
                                ]
                    for index, UNC_name in enumerate(UNC_names):
                        #print(UNC_name)
                        UNC_type= UNC_types[index]
                        #print(UNC_type)
                        DNN={}
                        if UNC_type == 'Egen':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy', 'circular_unc'] 
                        elif UNC_type == 'Egen_nounc':
                            keys = ['x', 'y', 'z', 'time', 'zenith', 'azimuth', 'energy'] 
                        elif UNC_type == 'unc':
                            keys = ['cascade_azimuth_cascade_azimuth', 'cascade_zenith_cascade_zenith']
                        elif UNC_type == 'egen_loss_reco':
                            keys = ['loss_reco']
                        elif UNC_type == 'circ_unc':
                            keys = ['value']
                        for key in keys:
                            DNN[key] = f.root._f_get_child(UNC_name).cols._f_col(key)[:]
                        unc[UNC_name] = DNN

                #ra = unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['azimuth']
                #dec= unc['EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle']['zenith'] - np.pi/2.
                ra = unc['EventGeneratorSelectedReco_I3Particle']['azimuth']
                dec= unc['EventGeneratorSelectedReco_I3Particle']['zenith'] - np.pi/2.
                
                DNNlabels_p_starting=f.root.LabelsDeepLearning.cols.p_starting[:]
                DNNlabels_p_entering=f.root.LabelsDeepLearning.cols.p_entering[:]
                DNNlabels_true_x=f.root.LabelsDeepLearning.cols.PrimaryDirectionX[:]
                DNNlabels_true_y=f.root.LabelsDeepLearning.cols.PrimaryDirectionY[:]
                DNNlabels_true_z=f.root.LabelsDeepLearning.cols.PrimaryDirectionZ[:]

                #BDT_dnn_cscd_l3a_02_cascade_300m = f.root.BDT_dnn_cscd_l3a_02__cascade_300m.cols.pred_001[:]
                #BDT_preselection_01 = f.root.BDT_preselection_01.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01_cascade_300m = f.root.BDT_dnn_cscd_l3a_01__cascade_300m.cols.pred_001[:]
                #BDT_dnn_cscd_l3a_01 = f.root.BDT_dnn_cscd_l3a_01.cols.pred_001[:]

                trueRa = a
                trueDec = z-np.pi/2.

                interaction_type=f.root.I3MCWeightDict.cols.InteractionType[:]
                all_Run.append(Run)
                all_Event.append(Event)
                all_trueE.append(trueE)

                all_ow.append(ow)
                all_mu_score.append(mu_score)
                all_c_score.append(c_score)
                all_dec.append(dec)
                all_ra.append(ra)
                dataset_ids.append(dataset_id)

                #all_sigma.append(sigma)

                all_trueRa.append(trueRa)
                all_trueDec.append(trueDec)
                all_type.append(particle_type)
                all_interaction.append(interaction_type)
                all_truelength.append(truelength)

                #all_cscd_l3.append(cscd_l3)

                
                #all_cscd_l3.append(cscd_l3)

                #DNN_name='DeepLearningReco_mese_v2__all_gl_both2'
                #all_DNNMESE_E.append(data[DNN_name]['PrimaryEnergy'])
                #all_DNNMESE_zen.append(data[DNN_name]['PrimaryZenith'])
                #all_DNNMESE_azi.append(data[DNN_name]['PrimaryAzimuth'])
                #all_DNNMESE_x.append(data[DNN_name]['PrimaryDirectionX'])
                #all_DNNMESE_y.append(data[DNN_name]['PrimaryDirectionY'])
                #all_DNNMESE_z.append(data[DNN_name]['PrimaryDirectionZ'])
                #all_DNNMESE_zen_un.append(data[DNN_name]['PrimaryZenith_uncertainty'])
                #all_DNNMESE_azi_un.append(data[DNN_name]['PrimaryAzimuth_uncertainty'])
                #all_DNNMESE_x_un.append(dir_x_unc)
                #all_DNNMESE_y_un.append(dir_y_unc)
                #all_DNNMESE_z_un.append(dir_z_unc)
                
                DNN_name ='DeepLearningReco_event_selection_dnn_cscd_l3a_starting_cascades_150m_red_summary_stats_fast_02'
                all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02.append(data[DNN_name]['p_starting_cascade_L100_D150'])
                
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3b_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01.append(data[DNN_name]['p_starting_300m'])

                if egen == True:
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_I3Particle'
                    all_egen_x.append(unc[DNN_name]['x'])
                    all_egen_y.append(unc[DNN_name]['y'])
                    all_egen_z.append(unc[DNN_name]['z'])
                    all_egen_time.append(unc[DNN_name]['time'])
                    egen_zenith = unc[DNN_name]['zenith']
                    all_egen_zen.append(unc[DNN_name]['zenith'])
                    all_egen_azi.append(unc[DNN_name]['azimuth'])
                    all_egen_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01'
                    all_egen_loss_reco.append(unc[DNN_name]['loss_reco'])

                    DNN_name='EventGeneratorSelectedReco_I3Particle'
                    all_egenbest_x.append(unc[DNN_name]['x'])
                    all_egenbest_y.append(unc[DNN_name]['y'])
                    all_egenbest_z.append(unc[DNN_name]['z'])
                    all_egenbest_time.append(unc[DNN_name]['time'])
                    egenbest_zenith = unc[DNN_name]['zenith']
                    all_egenbest_zen.append(unc[DNN_name]['zenith'])
                    all_egenbest_azi.append(unc[DNN_name]['azimuth'])
                    all_egenbest_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name = 'EventGeneratorSelectedReco_cov_matrix_cov_sand_circular_unc'
                    allbest_circ_unc_cov_sand.append(unc[DNN_name]['value'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_I3Particle'
                    all_egen2c_x.append(unc[DNN_name]['x'])
                    all_egen2c_y.append(unc[DNN_name]['y'])
                    all_egen2c_z.append(unc[DNN_name]['z'])
                    all_egen2c_time.append(unc[DNN_name]['time'])
                    egen2c_zenith = unc[DNN_name]['zenith']
                    all_egen2c_zen.append(unc[DNN_name]['zenith'])
                    all_egen2c_azi.append(unc[DNN_name]['azimuth'])
                    all_egen2c_E.append(unc[DNN_name]['energy'])
                    
                    DNN_name='EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01'
                    all_egen2c_loss_reco.append(unc[DNN_name]['loss_reco'])
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov' 
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))
                    
                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_fit.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt( 2.))

                    DNN_name = 'EventGenerator_cascade_7param_noise_tw_BFRv1Spice321_01_unc_patch_cov_matrix_cov_sand_fit'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all_circ_unc_cov_sand_fit.append(np.sqrt(var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                    DNN_name = 'EventGenerator_starting_multi_cascade_7param_noise_tw_BFRv1Spice321_low_mem_n002_01_cov_matrix_cov_sand'
                    var_azimuth = unc[DNN_name]['cascade_azimuth_cascade_azimuth']
                    var_zenith = unc[DNN_name]['cascade_zenith_cascade_zenith']
                    all2c_circ_unc_cov_sand.append(np.sqrt (var_zenith + var_azimuth * np.sin(egen_zenith)**2) / np.sqrt(2.))

                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01'
                all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_dnn_cscd_l3c_track_numu_cc_vs_starting_01'
                all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_events_300m_fast_medium_01' 
                all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_starting_nue_300m_fast_medium_01'
                all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01.append(data[DNN_name]['p_starting_300m'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_nue_cc_01' 
                all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e.append(data[DNN_name]['p_starting_cc_e'])
                DNN_name = 'DeepLearningReco_event_selection_egen_vertex_track_numu_cc_vs_starting_01'
                all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu.append(data[DNN_name]['p_starting_cc_mu'])
                
                all_DNNlabels_p_starting.append(DNNlabels_p_starting)
                all_DNNlabels_p_entering.append(DNNlabels_p_entering)
                all_DNNlabels_true_x.append(DNNlabels_true_x)
                all_DNNlabels_true_y.append(DNNlabels_true_y)
                all_DNNlabels_true_z.append(DNNlabels_true_z)
                all_DNNlabels_true_VertexZ.append(DNNlabels_true_VertexZ)
                all_DNNlabels_true_VertexY.append(DNNlabels_true_VertexY)
                all_DNNlabels_true_VertexX.append(DNNlabels_true_VertexX)
                all_DNNlabels_true_azi.append(DNNlabels_true_azi)
                all_DNNlabels_true_zen.append(DNNlabels_true_zen)

                all_BDT_final_starting_300m_01.append(BDT_final_starting_300m_01 )
                all_event_selection_cascade_zenith.append(event_selection_cascade_zenith)
                all_event_selection_cascade_azimuth.append(event_selection_cascade_azimuth)
                all_event_selection_cascade_energy.append(event_selection_cascade_energy)
                all_event_selection_cascade_time.append(event_selection_cascade_time)

        print('concatenating')
    

        all_Run=np.concatenate(all_Run)
        all_Event=np.concatenate(all_Event)
        all_trueE=np.concatenate(all_trueE)
        all_truelength = np.concatenate(all_truelength)
        all_ow=np.concatenate(all_ow)
        all_ra=np.concatenate(all_ra)
        all_dec=np.concatenate(all_dec)
        #all_sigma=np.concatenate(all_sigma)
        all_trueRa=np.concatenate(all_trueRa)
        all_trueDec=np.concatenate(all_trueDec)
        all_type=np.concatenate(all_type)
        all_interaction=np.concatenate(all_interaction)

        all_mu_score = np.concatenate(all_mu_score)
        all_c_score = np.concatenate(all_c_score)

        #all_cscd_l3 = np.concatenate(all_cscd_l3)

        dataset_ids = np.concatenate(dataset_ids)
        
        if egen  == True:
            all_egen_x = np.concatenate(all_egen_x)
            all_egen_y = np.concatenate(all_egen_y)
            all_egen_z = np.concatenate(all_egen_z)
            all_egen_time = np.concatenate(all_egen_time)
            all_egen_zen = np.concatenate(all_egen_zen)
            all_egen_azi = np.concatenate(all_egen_azi)
            all_egen_E = np.concatenate(all_egen_E)
            all_egen_loss_reco = np.concatenate(all_egen_loss_reco)

            all_egen2c_x = np.concatenate(all_egen2c_x)
            all_egen2c_y = np.concatenate(all_egen2c_y)
            all_egen2c_z = np.concatenate(all_egen2c_z)
            all_egen2c_time = np.concatenate(all_egen2c_time)
            all_egen2c_zen = np.concatenate(all_egen2c_zen)
            all_egen2c_azi = np.concatenate(all_egen2c_azi)
            all_egen2c_E = np.concatenate(all_egen2c_E)
            all_egen2c_loss_reco = np.concatenate(all_egen2c_loss_reco)
            
            all_egenbest_x = np.concatenate(all_egenbest_x)
            all_egenbest_y = np.concatenate(all_egenbest_y)
            all_egenbest_z = np.concatenate(all_egenbest_z)
            all_egenbest_time = np.concatenate(all_egenbest_time)
            all_egenbest_zen = np.concatenate(all_egenbest_zen)
            all_egenbest_azi = np.concatenate(all_egenbest_azi)
            all_egenbest_E = np.concatenate(all_egenbest_E)
            all2c_circ_unc_cov = np.concatenate(all2c_circ_unc_cov)
            all2c_circ_unc_cov_fit = np.concatenate(all2c_circ_unc_cov_fit) 
            all2c_circ_unc_cov_sand = np.concatenate(all2c_circ_unc_cov_sand )
            #all2c_circ_unc_cov_sand_fit = np.concatenate(all2c_circ_unc_cov_sand_fit)
            allbest_circ_unc_cov_sand = np.concatenate(allbest_circ_unc_cov_sand )


            #all_azi_unc_cov = np.concatenate(all_azi_unc_cov)
            #all_zen_unc_cov = np.concatenate(all_zen_unc_cov)
            all_circ_unc_cov = np.concatenate(all_circ_unc_cov)
            #all_azi_unc_cov_fit = np.concatenate(all_azi_unc_cov_fit )
            #all_zen_unc_cov_fit = np.concatenate(all_zen_unc_cov_fit)
            all_circ_unc_cov_fit = np.concatenate(all_circ_unc_cov_fit) 
            #all_azi_unc_cov_sand = np.concatenate(all_azi_unc_cov_sand)
            #all_zen_unc_cov_sand = np.concatenate(all_zen_unc_cov_sand)
            all_circ_unc_cov_sand = np.concatenate(all_circ_unc_cov_sand )
            #all_azi_unc_cov_sand_fit = np.concatenate(all_azi_unc_cov_sand_fit)
            #all_zen_unc_cov_sand_fit = np.concatenate(all_zen_unc_cov_sand_fit)
            all_circ_unc_cov_sand_fit = np.concatenate(all_circ_unc_cov_sand_fit)
        
        all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02 = np.concatenate(all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02)
        
        all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01 = np.concatenate(all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01)
        
        all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m = np.concatenate(all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e)
        all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu = np.concatenate(all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu)
        all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01)
        all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01 = np.concatenate(all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01)
        all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e)
        all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu = np.concatenate(all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu)

                

        all_DNNlabels_p_starting=np.concatenate(all_DNNlabels_p_starting)
        all_DNNlabels_p_entering=np.concatenate(all_DNNlabels_p_entering)
        all_DNNlabels_true_x=np.concatenate(all_DNNlabels_true_x)
        all_DNNlabels_true_y=np.concatenate(all_DNNlabels_true_y)
        all_DNNlabels_true_z = np.concatenate(all_DNNlabels_true_z)
        all_DNNlabels_true_VertexZ = np.concatenate(all_DNNlabels_true_VertexZ)
        all_DNNlabels_true_VertexY = np.concatenate(all_DNNlabels_true_VertexY)
        all_DNNlabels_true_VertexX = np.concatenate(all_DNNlabels_true_VertexX)
        all_DNNlabels_true_azi=np.concatenate(all_DNNlabels_true_azi)
        all_DNNlabels_true_zen=np.concatenate(all_DNNlabels_true_zen)
                
        
        #all_es_length_02 = np.concatenate(all_es_length_02)
        #all_es_length_log_unc_02 = np.concatenate(all_es_length_log_unc_02)
        all_BDT_final_starting_300m_01 = np.concatenate( all_BDT_final_starting_300m_01 )
        all_event_selection_cascade_zenith = np.concatenate( all_event_selection_cascade_zenith )
        all_event_selection_cascade_azimuth = np.concatenate( all_event_selection_cascade_azimuth )
        all_event_selection_cascade_energy = np.concatenate( all_event_selection_cascade_energy )
        all_event_selection_cascade_time = np.concatenate( all_event_selection_cascade_time )


        print('saving_dataframe')
        mc_dict={'Run' :all_Run, 'Event': all_Event, 'trueRa': all_trueRa, 
            'trueDec' : all_trueDec, 'trueE' : all_trueE, 'ra': all_ra, 'dec' :all_dec, 
            'true_tracklength' : all_truelength,
            'mu_score' : all_mu_score, 'c_score' : all_c_score,
            #'old_sigma' :all_sigma, 
            'dataset_id' : dataset_ids, 
            #'sigma' : all_circ_unc_cov_sand, 'cscdl3' : all_cscd_l3,
            'ow': all_ow, 'trueptype': all_type, 'trueinttype' : all_interaction, 
            'egen2c_x' : all_egen2c_x, 'egen2c_y' : all_egen2c_y, 'egen2c_z' : all_egen2c_z,
            'egen2c_time' : all_egen2c_time, 'egen2c_zen' : all_egen2c_zen,
            'egen2c_azi' : all_egen2c_azi, 'egen2c_E' : all_egen2c_E,
            'egen2c_loss_reco' : all_egen2c_loss_reco, 'egen_loss_reco' : all_egen_loss_reco,
            'egenbest_x' : all_egenbest_x, 'egenbest_y' : all_egenbest_y, 'egenbest_z' : all_egenbest_z,
            'egenbest_time' : all_egenbest_time, 'egenbest_zen' : all_egenbest_zen,
            'egenbest_azi' : all_egenbest_azi, 'egenbest_E' : all_egenbest_E,
            'circ_unc_cov_2c' :  all2c_circ_unc_cov, 'circ_unc_cov_fit_2c' : all2c_circ_unc_cov_fit,
            'circ_unc_cov_sand_2c' : all2c_circ_unc_cov_sand, #'circ_unc_cov_sand_fit_2c' : all2c_circ_unc_cov_sand_fit,
            'circ_unc_cov_sand_best' : allbest_circ_unc_cov_sand,
            #'cscdl3_cont_tag' : all_cscdl3_cont_tag,
            'egen_x' : all_egen_x, 'egen_y' : all_egen_y, 'egen_z' : all_egen_z, 'egen_time' : all_egen_time,
            'egen_zen' : all_egen_zen, 'egen_azi' : all_egen_azi, 'egen_E' :all_egen_E , #'egen_circ_unc' : all_egen_circ_unc,
            'BDT_final_starting_300m_01' : all_BDT_final_starting_300m_01, 'event_selection_cascade_zenith' : all_event_selection_cascade_zenith,
            'event_selection_cascade_azimuth' : all_event_selection_cascade_azimuth, 'event_selection_cacscade_energy' : all_event_selection_cascade_energy,
            'event_selection_cascade_time' : all_event_selection_cascade_time,
            #'egen_vertex_track_in_detector_length' : all_es_egen_vertex_track_in_detector_length,
            #'egen_vertex_track_in_detector_length_unc' : all_es_egen_vertex_track_in_detector_length_unc,
            #'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            #'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            #'egen_marginalized_zen' : all_egen_marginalized_zen, 'egen_marginalized_azi' : all_egen_marginalized_azi, 'egen_marginalized_E' :all_egen_marginalized_E ,
            #'egen_marginalized_circ_unc' : all_egen_marginalized_circ_unc,
            #'azi_unc_cov' : all_azi_unc_cov, 'zen_unc_cov' : all_zen_unc_cov, 
            'circ_unc_cov' : all_circ_unc_cov,
            #'azi_unc_cov_fit' : all_azi_unc_cov_fit, 'zen_unc_cov_fit' : all_zen_unc_cov_fit, 
            'circ_unc_cov_fit' : all_circ_unc_cov_fit,
            #'azi_unc_sand' : all_azi_unc_cov_sand, 'zen_unc_sand' : all_zen_unc_cov_sand, 
            'circ_unc_sand' : all_circ_unc_cov_sand,
            #'azi_unc_sand_fit' : all_azi_unc_cov_sand_fit, 'zen_unc_sand' : all_zen_unc_cov_sand_fit, 
            #'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02,
            #'DNN_es_cscdl3a_150m_starting_events_red_fast_02' :  all_es_dnn_cscdl3a_starting_events_150m_red_fast_02,
            'dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m' :all_es_dnn_cscd_l3c_cut2_starting_events_300m_fast_medium_01_p_starting_300m,
            'dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e' : all_es_dnn_cscd_l3c_track_numu_cc_vs_nue_cc_01_p_starting_cc_e,
            'dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu' : all_es_dnn_cscd_l3c_track_numu_cc_vs_starting_01_p_starting_cc_mu_p_starting_cc_mu,
            'dnn_egen_vertex_starting_events_300m_fast_medium_01' : all_es_dnn_egen_vertex_starting_events_300m_fast_medium_01,
            'dnn_egen_vertex_starting_nue_300M_fast_medium_01' : all_es_dnn_egen_vertex_starting_nue_300M_fast_medium_01,
            'egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e' : all_es_egen_vertex_track_numu_cc_vs_nue_cc_p_starting_cc_e,
            'egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu' : all_es_egen_vertex_track_numu_cc_vs_starting_01_p_starting_cc_mu,
            'DNN_es_cscdl3a_150m_starting_cascades_red_fast_02' : all_es_dnn_cscdl3a_starting_cascades_150m_red_fast_02, 
            'DNN_es_dnn_cscdl3b_cut2_fast_medium_01' : all_es_dnn_cscdl3b_starting_events_300m_cut_fast_medium_01,
            #'DNN_es_cscdl3a_300m_red_fast_02' : all_es_dnn_cscdl3a_starting_events_300m_red_fast_02,
            #'DNN_es_p_starting_300m_01' : all_es_300m_p_starting_300m_01,
            #'DNN_es_p_starting_300m_02' : all_es_300m_p_starting_300m_02,
            #'DNN_es_p_starting_300m_mp_big_02' : all_es_monopod_p_starting_300m_big_02,
            #'DNN_es_p_entering' : all_es_p_entering, 
            #'DNN_es_length' : all_es_length, 'DNN_es_length_log_unc' : all_es_length_log_unc, 
            #'DNN_es_length_02' : all_es_length_02, 'DNN_es_length_log_unc_02' : all_es_length_log_unc_02, 
            #'DNN_es_p_track' : all_es_p_track,
            #'DNN_es_cscdl3b_starting_cascades_big_02' : all_es_dnn_cscdl3b_starting_cascades_big_02,
            #'DNN_es_cscdl3b_starting_cascades_big_strict_02' : all_es_dnn_cscdl3b_starting_cascades_big_strict_02,
            #'DNN_es_cscdl3b_starting_events_02' : all_es_dnn_cscdl3b_starting_events_02,
            'DNNlabels_p_starting' :all_DNNlabels_p_starting, 'DNNlabels_p_entering' : all_DNNlabels_p_entering,
            'DNNlabels_true_x' :all_DNNlabels_true_x, 'DNNlabels_true_y' : all_DNNlabels_true_y,'DNNlabels_true_z' : all_DNNlabels_true_z, 
            'DNNlabels_true_azi' :all_DNNlabels_true_azi, 'DNNlabels_true_zen' : all_DNNlabels_true_zen,
            'DNNlabels_true_VertexZ' : all_DNNlabels_true_VertexZ, 
            'DNNlabels_true_VertexY' : all_DNNlabels_true_VertexY, 
            'DNNlabels_true_VertexX' : all_DNNlabels_true_VertexX}

        keys = mc_dict.keys()
        for key in keys:
            print(key)
            print(len(mc_dict[key]))
        df = pd.DataFrame(mc_dict)
       
        df.to_hdf('/data/user/ssclafani/data/cscd/final/sens_genie_2c.hdf5', 'data') 

@cli.command()
def make_GRL_list():
    pass

if __name__ == '__main__':
    exe_t0 = now ()
    print (' start at {} .'.format (exe_t0))
    cli ()

